// File: tb.v
// Generated by MyHDL 0.8.1
// Date: Sat May 16 10:04:30 2015


`timescale 1ns/10ps

module tb (

);



wire [7:0] o_addr;
reg [8:0] cnt;
reg [7:0] i;
reg i_rst;
reg i_clk;
reg i_en;
wire signed [31:0] o_data;
reg i_new_data;
reg o_union;
reg signed [15:0] i_data;
reg [7:0] FFT_in_i_w_muxed_rd_addr;
reg FFT_in_i_w_muxed_we;
wire [7:0] FFT_in_o_w_union4_wr_addr;
wire FFT_in_o_w_shift_active;
reg [5:0] FFT_in_r_cnt;
wire signed [15:0] FFT_in_o_w_shift_data;
reg [7:0] FFT_in_i_w_muxed_wr_addr;
wire FFT_in_o_w_union4_we;
reg FFT_in_r_en_un4;
reg [4:0] FFT_in_r_state;
wire signed [31:0] FFT_in_o_w_union4_data;
wire signed [31:0] FFT_in_o_w_dualram_data;
reg [7:0] FFT_in_o_w_shift_addr;
reg signed [31:0] FFT_in_i_w_muxed_data;
wire [7:0] FFT_in_o_w_union4_rd_addr;
reg [3:0] FFT_in_r_log_val;
reg signed [31:0] FFT_in_inst_1_r_Dre_Wim;
wire signed [15:0] FFT_in_inst_1_w_Dim;
reg signed [16:0] FFT_in_inst_1_r_sum_re_minus;
reg signed [31:0] FFT_in_inst_1_r_Wre_Wim;
wire signed [15:0] FFT_in_inst_1_w_mult_im;
reg signed [16:0] FFT_in_inst_1_r_sum_im_plus;
reg signed [16:0] FFT_in_inst_1_r_sum_re_plus;
wire signed [15:0] FFT_in_inst_1_w_Rre;
wire signed [15:0] FFT_in_inst_1_w_mult_re;
reg [7:0] FFT_in_inst_1_r_wr_addr;
reg [7:0] FFT_in_inst_1_w_bit_reverse_wr_addr;
wire signed [15:0] FFT_in_inst_1_w_Dre;
reg [6:0] FFT_in_inst_1_w_bit_reverse_w_addr;
reg signed [15:0] FFT_in_inst_1_r_Wim;
reg signed [31:0] FFT_in_inst_1_r_Dre_Wre;
reg [7:0] FFT_in_inst_1_w_bit_reverse_rd_addr;
reg signed [15:0] FFT_in_inst_1_r_Wre;
reg FFT_in_inst_1_r_we;
reg signed [16:0] FFT_in_inst_1_w_out_re1;
reg signed [16:0] FFT_in_inst_1_w_out_re0;
reg signed [31:0] FFT_in_inst_1_r_Dim_Wre;
reg signed [31:0] FFT_in_inst_1_r_Dim_Wim;
reg signed [16:0] FFT_in_inst_1_r_sum_im_minus;
wire signed [15:0] FFT_in_inst_1_w_Rim;
reg signed [16:0] FFT_in_inst_1_w_out_im0;
reg signed [16:0] FFT_in_inst_1_w_out_im1;
reg signed [31:0] FFT_in_fsm_dualram_r_dout;
reg FFT_in_inst_7_r_shift_act;
reg FFT_in_inst_7_r_we;
wire signed [15:0] FFT_in_inst_7_w_rom_dout;
wire signed [15:0] FFT_in_inst_7_w_ram_dout;
wire signed [31:0] FFT_in_inst_7_w_mult;
reg signed [15:0] FFT_in_inst_7_r_shift_dout;
reg signed [15:0] FFT_in_inst_7_w_ram_din;
reg [7:0] FFT_in_inst_7_r_addr;
reg [7:0] FFT_in_inst_7_r_shift_addr;
reg signed [15:0] FFT_in_inst_7_rom_r_dout;
reg signed [15:0] FFT_in_inst_7_ram_r_dout;

reg [31:0] FFT_in_inst_1_r_out_data [0:2-1];
reg signed [31:0] FFT_in_inst_1_r_i_data [0:2-1];
reg [7:0] FFT_in_inst_1_r_rd_addr [0:2-1];
reg signed [31:0] FFT_in_fsm_dualram_mem [0:256-1];
reg signed [15:0] FFT_in_inst_7_ram_mem [0:256-1];



initial begin
    i_clk = 0;
    forever #10 i_clk = !i_clk;
end

initial begin: TB_CONTROL
    @(posedge i_clk);
    i_rst <= 1;
    @(posedge i_clk);
    @(posedge i_clk);
    @(posedge i_clk);
    i_data <= 0;
    i_en <= 1;
    i_rst <= 0;
    while (1'b1) begin
        @(posedge i_clk);
        cnt <= ((cnt + 1) % 512);
        if ((cnt == 0)) begin
            i_new_data <= 1;
            case (i)
                0: i_data <= 8192;
                1: i_data <= 8190;
                2: i_data <= 8182;
                3: i_data <= 8170;
                4: i_data <= 8153;
                5: i_data <= 8130;
                6: i_data <= 8103;
                7: i_data <= 8071;
                8: i_data <= 8035;
                9: i_data <= 7993;
                10: i_data <= 7946;
                11: i_data <= 7895;
                12: i_data <= 7839;
                13: i_data <= 7779;
                14: i_data <= 7713;
                15: i_data <= 7643;
                16: i_data <= 7568;
                17: i_data <= 7489;
                18: i_data <= 7405;
                19: i_data <= 7317;
                20: i_data <= 7225;
                21: i_data <= 7128;
                22: i_data <= 7027;
                23: i_data <= 6921;
                24: i_data <= 6811;
                25: i_data <= 6698;
                26: i_data <= 6580;
                27: i_data <= 6458;
                28: i_data <= 6333;
                29: i_data <= 6203;
                30: i_data <= 6070;
                31: i_data <= 5933;
                32: i_data <= 5793;
                33: i_data <= 5649;
                34: i_data <= 5501;
                35: i_data <= 5351;
                36: i_data <= 5197;
                37: i_data <= 5040;
                38: i_data <= 4880;
                39: i_data <= 4717;
                40: i_data <= 4551;
                41: i_data <= 4383;
                42: i_data <= 4212;
                43: i_data <= 4038;
                44: i_data <= 3862;
                45: i_data <= 3683;
                46: i_data <= 3503;
                47: i_data <= 3320;
                48: i_data <= 3135;
                49: i_data <= 2948;
                50: i_data <= 2760;
                51: i_data <= 2570;
                52: i_data <= 2378;
                53: i_data <= 2185;
                54: i_data <= 1990;
                55: i_data <= 1795;
                56: i_data <= 1598;
                57: i_data <= 1401;
                58: i_data <= 1202;
                59: i_data <= 1003;
                60: i_data <= 803;
                61: i_data <= 603;
                62: i_data <= 402;
                63: i_data <= 201;
                64: i_data <= 0;
                65: i_data <= (-201);
                66: i_data <= (-402);
                67: i_data <= (-603);
                68: i_data <= (-803);
                69: i_data <= (-1003);
                70: i_data <= (-1202);
                71: i_data <= (-1401);
                72: i_data <= (-1598);
                73: i_data <= (-1795);
                74: i_data <= (-1990);
                75: i_data <= (-2185);
                76: i_data <= (-2378);
                77: i_data <= (-2570);
                78: i_data <= (-2760);
                79: i_data <= (-2948);
                80: i_data <= (-3135);
                81: i_data <= (-3320);
                82: i_data <= (-3503);
                83: i_data <= (-3683);
                84: i_data <= (-3862);
                85: i_data <= (-4038);
                86: i_data <= (-4212);
                87: i_data <= (-4383);
                88: i_data <= (-4551);
                89: i_data <= (-4717);
                90: i_data <= (-4880);
                91: i_data <= (-5040);
                92: i_data <= (-5197);
                93: i_data <= (-5351);
                94: i_data <= (-5501);
                95: i_data <= (-5649);
                96: i_data <= (-5793);
                97: i_data <= (-5933);
                98: i_data <= (-6070);
                99: i_data <= (-6203);
                100: i_data <= (-6333);
                101: i_data <= (-6458);
                102: i_data <= (-6580);
                103: i_data <= (-6698);
                104: i_data <= (-6811);
                105: i_data <= (-6921);
                106: i_data <= (-7027);
                107: i_data <= (-7128);
                108: i_data <= (-7225);
                109: i_data <= (-7317);
                110: i_data <= (-7405);
                111: i_data <= (-7489);
                112: i_data <= (-7568);
                113: i_data <= (-7643);
                114: i_data <= (-7713);
                115: i_data <= (-7779);
                116: i_data <= (-7839);
                117: i_data <= (-7895);
                118: i_data <= (-7946);
                119: i_data <= (-7993);
                120: i_data <= (-8035);
                121: i_data <= (-8071);
                122: i_data <= (-8103);
                123: i_data <= (-8130);
                124: i_data <= (-8153);
                125: i_data <= (-8170);
                126: i_data <= (-8182);
                127: i_data <= (-8190);
                128: i_data <= (-8192);
                129: i_data <= (-8190);
                130: i_data <= (-8182);
                131: i_data <= (-8170);
                132: i_data <= (-8153);
                133: i_data <= (-8130);
                134: i_data <= (-8103);
                135: i_data <= (-8071);
                136: i_data <= (-8035);
                137: i_data <= (-7993);
                138: i_data <= (-7946);
                139: i_data <= (-7895);
                140: i_data <= (-7839);
                141: i_data <= (-7779);
                142: i_data <= (-7713);
                143: i_data <= (-7643);
                144: i_data <= (-7568);
                145: i_data <= (-7489);
                146: i_data <= (-7405);
                147: i_data <= (-7317);
                148: i_data <= (-7225);
                149: i_data <= (-7128);
                150: i_data <= (-7027);
                151: i_data <= (-6921);
                152: i_data <= (-6811);
                153: i_data <= (-6698);
                154: i_data <= (-6580);
                155: i_data <= (-6458);
                156: i_data <= (-6333);
                157: i_data <= (-6203);
                158: i_data <= (-6070);
                159: i_data <= (-5933);
                160: i_data <= (-5793);
                161: i_data <= (-5649);
                162: i_data <= (-5501);
                163: i_data <= (-5351);
                164: i_data <= (-5197);
                165: i_data <= (-5040);
                166: i_data <= (-4880);
                167: i_data <= (-4717);
                168: i_data <= (-4551);
                169: i_data <= (-4383);
                170: i_data <= (-4212);
                171: i_data <= (-4038);
                172: i_data <= (-3862);
                173: i_data <= (-3683);
                174: i_data <= (-3503);
                175: i_data <= (-3320);
                176: i_data <= (-3135);
                177: i_data <= (-2948);
                178: i_data <= (-2760);
                179: i_data <= (-2570);
                180: i_data <= (-2378);
                181: i_data <= (-2185);
                182: i_data <= (-1990);
                183: i_data <= (-1795);
                184: i_data <= (-1598);
                185: i_data <= (-1401);
                186: i_data <= (-1202);
                187: i_data <= (-1003);
                188: i_data <= (-803);
                189: i_data <= (-603);
                190: i_data <= (-402);
                191: i_data <= (-201);
                192: i_data <= 0;
                193: i_data <= 201;
                194: i_data <= 402;
                195: i_data <= 603;
                196: i_data <= 803;
                197: i_data <= 1003;
                198: i_data <= 1202;
                199: i_data <= 1401;
                200: i_data <= 1598;
                201: i_data <= 1795;
                202: i_data <= 1990;
                203: i_data <= 2185;
                204: i_data <= 2378;
                205: i_data <= 2570;
                206: i_data <= 2760;
                207: i_data <= 2948;
                208: i_data <= 3135;
                209: i_data <= 3320;
                210: i_data <= 3503;
                211: i_data <= 3683;
                212: i_data <= 3862;
                213: i_data <= 4038;
                214: i_data <= 4212;
                215: i_data <= 4383;
                216: i_data <= 4551;
                217: i_data <= 4717;
                218: i_data <= 4880;
                219: i_data <= 5040;
                220: i_data <= 5197;
                221: i_data <= 5351;
                222: i_data <= 5501;
                223: i_data <= 5649;
                224: i_data <= 5793;
                225: i_data <= 5933;
                226: i_data <= 6070;
                227: i_data <= 6203;
                228: i_data <= 6333;
                229: i_data <= 6458;
                230: i_data <= 6580;
                231: i_data <= 6698;
                232: i_data <= 6811;
                233: i_data <= 6921;
                234: i_data <= 7027;
                235: i_data <= 7128;
                236: i_data <= 7225;
                237: i_data <= 7317;
                238: i_data <= 7405;
                239: i_data <= 7489;
                240: i_data <= 7568;
                241: i_data <= 7643;
                242: i_data <= 7713;
                243: i_data <= 7779;
                244: i_data <= 7839;
                245: i_data <= 7895;
                246: i_data <= 7946;
                247: i_data <= 7993;
                248: i_data <= 8035;
                249: i_data <= 8071;
                250: i_data <= 8103;
                251: i_data <= 8130;
                252: i_data <= 8153;
                253: i_data <= 8170;
                254: i_data <= 8182;
                default: i_data <= 8190;
            endcase
            i <= (i + 1);
        end
        else begin
            i_new_data <= 0;
        end
    end
end


always @(FFT_in_o_w_shift_data, FFT_in_r_state, FFT_in_o_w_union4_data) begin: TB_FFT_IN_INST_0
    if ((FFT_in_r_state == 5'b00100)) begin
        FFT_in_i_w_muxed_data = (FFT_in_o_w_shift_data << 16);
    end
    else begin
        FFT_in_i_w_muxed_data = FFT_in_o_w_union4_data;
    end
end


always @(posedge i_clk) begin: TB_FFT_IN_INST_1_INST_0
    if ((FFT_in_r_en_un4 == 0)) begin
        FFT_in_inst_1_r_i_data[0] <= 0;
        FFT_in_inst_1_r_i_data[1] <= 0;
        FFT_in_inst_1_r_wr_addr <= 0;
        FFT_in_inst_1_r_rd_addr[0] <= 0;
        FFT_in_inst_1_r_rd_addr[1] <= 0;
        FFT_in_inst_1_r_out_data[0] <= 0;
        FFT_in_inst_1_r_out_data[1] <= 0;
        FFT_in_inst_1_r_we <= 0;
        FFT_in_inst_1_r_Wre <= 0;
        FFT_in_inst_1_r_Wim <= 0;
        FFT_in_inst_1_r_Dre_Wre <= 0;
        FFT_in_inst_1_r_Dim_Wim <= 0;
        FFT_in_inst_1_r_Dre_Wim <= 0;
        FFT_in_inst_1_r_Dim_Wre <= 0;
        FFT_in_inst_1_r_Wre_Wim <= 0;
    end
    else begin
        FFT_in_inst_1_r_rd_addr[1] <= FFT_in_inst_1_r_rd_addr[0];
        if (($signed({1'b0, FFT_in_inst_1_r_rd_addr[0]}) != (256 - 1))) begin
            FFT_in_inst_1_r_rd_addr[0] <= (FFT_in_inst_1_r_rd_addr[0] + 1'b1);
        end
        if ((FFT_in_inst_1_r_rd_addr[1] == 3)) begin
            FFT_in_inst_1_r_we <= 1;
        end
        if (($signed({1'b0, FFT_in_inst_1_r_wr_addr}) == (256 - 1))) begin
            FFT_in_inst_1_r_we <= 0;
        end
        if ((FFT_in_inst_1_r_we == 1)) begin
            FFT_in_inst_1_r_wr_addr <= (FFT_in_inst_1_r_wr_addr + 1'b1);
        end
        if ((FFT_in_inst_1_r_rd_addr[1][0] == 0)) begin
            FFT_in_inst_1_r_i_data[0] <= FFT_in_o_w_dualram_data;
            case (FFT_in_inst_1_w_bit_reverse_w_addr)
                0: FFT_in_inst_1_r_Wre_Wim <= 32'h40000000;
                1: FFT_in_inst_1_r_Wre_Wim <= 1073479278;
                2: FFT_in_inst_1_r_Wre_Wim <= 1072495836;
                3: FFT_in_inst_1_r_Wre_Wim <= 1070922571;
                4: FFT_in_inst_1_r_Wre_Wim <= 1068628410;
                5: FFT_in_inst_1_r_Wre_Wim <= 1065744426;
                6: FFT_in_inst_1_r_Wre_Wim <= 1062205084;
                7: FFT_in_inst_1_r_Wre_Wim <= 1058010383;
                8: FFT_in_inst_1_r_Wre_Wim <= 1053160324;
                9: FFT_in_inst_1_r_Wre_Wim <= 1047720442;
                10: FFT_in_inst_1_r_Wre_Wim <= 1041625203;
                11: FFT_in_inst_1_r_Wre_Wim <= 1034940142;
                12: FFT_in_inst_1_r_Wre_Wim <= 1027599724;
                13: FFT_in_inst_1_r_Wre_Wim <= 1019603949;
                14: FFT_in_inst_1_r_Wre_Wim <= 1011018352;
                15: FFT_in_inst_1_r_Wre_Wim <= 1001842935;
                16: FFT_in_inst_1_r_Wre_Wim <= 992077698;
                17: FFT_in_inst_1_r_Wre_Wim <= 981657105;
                18: FFT_in_inst_1_r_Wre_Wim <= 970712227;
                19: FFT_in_inst_1_r_Wre_Wim <= 959177530;
                20: FFT_in_inst_1_r_Wre_Wim <= 946987477;
                21: FFT_in_inst_1_r_Wre_Wim <= 934338676;
                22: FFT_in_inst_1_r_Wre_Wim <= 921034521;
                23: FFT_in_inst_1_r_Wre_Wim <= 907206083;
                24: FFT_in_inst_1_r_Wre_Wim <= 892853362;
                25: FFT_in_inst_1_r_Wre_Wim <= 877910822;
                26: FFT_in_inst_1_r_Wre_Wim <= 862509536;
                27: FFT_in_inst_1_r_Wre_Wim <= 846518432;
                28: FFT_in_inst_1_r_Wre_Wim <= 830068582;
                29: FFT_in_inst_1_r_Wre_Wim <= 813094450;
                30: FFT_in_inst_1_r_Wre_Wim <= 795661573;
                31: FFT_in_inst_1_r_Wre_Wim <= 777704415;
                32: FFT_in_inst_1_r_Wre_Wim <= 759288511;
                33: FFT_in_inst_1_r_Wre_Wim <= 740413862;
                34: FFT_in_inst_1_r_Wre_Wim <= 721146004;
                35: FFT_in_inst_1_r_Wre_Wim <= 701419402;
                36: FFT_in_inst_1_r_Wre_Wim <= 681234055;
                37: FFT_in_inst_1_r_Wre_Wim <= 660655500;
                38: FFT_in_inst_1_r_Wre_Wim <= 639683736;
                39: FFT_in_inst_1_r_Wre_Wim <= 618318765;
                40: FFT_in_inst_1_r_Wre_Wim <= 596560585;
                41: FFT_in_inst_1_r_Wre_Wim <= 574474734;
                42: FFT_in_inst_1_r_Wre_Wim <= 552061211;
                43: FFT_in_inst_1_r_Wre_Wim <= 529320016;
                44: FFT_in_inst_1_r_Wre_Wim <= 506185615;
                45: FFT_in_inst_1_r_Wre_Wim <= 482789077;
                46: FFT_in_inst_1_r_Wre_Wim <= 459130405;
                47: FFT_in_inst_1_r_Wre_Wim <= 435144062;
                48: FFT_in_inst_1_r_Wre_Wim <= 410961119;
                49: FFT_in_inst_1_r_Wre_Wim <= 386516042;
                50: FFT_in_inst_1_r_Wre_Wim <= 361808830;
                51: FFT_in_inst_1_r_Wre_Wim <= 336839483;
                52: FFT_in_inst_1_r_Wre_Wim <= 311739073;
                53: FFT_in_inst_1_r_Wre_Wim <= 286442065;
                54: FFT_in_inst_1_r_Wre_Wim <= 260948459;
                55: FFT_in_inst_1_r_Wre_Wim <= 235323790;
                56: FFT_in_inst_1_r_Wre_Wim <= 209502523;
                57: FFT_in_inst_1_r_Wre_Wim <= 183615729;
                58: FFT_in_inst_1_r_Wre_Wim <= 157597873;
                59: FFT_in_inst_1_r_Wre_Wim <= 131514491;
                60: FFT_in_inst_1_r_Wre_Wim <= 105300047;
                61: FFT_in_inst_1_r_Wre_Wim <= 79020076;
                62: FFT_in_inst_1_r_Wre_Wim <= 52740116;
                63: FFT_in_inst_1_r_Wre_Wim <= 26394629;
                64: FFT_in_inst_1_r_Wre_Wim <= 49152;
                65: FFT_in_inst_1_r_Wre_Wim <= (-26296315);
                66: FFT_in_inst_1_r_Wre_Wim <= (-52641772);
                67: FFT_in_inst_1_r_Wre_Wim <= (-78921684);
                68: FFT_in_inst_1_r_Wre_Wim <= (-105201585);
                69: FFT_in_inst_1_r_Wre_Wim <= (-131415941);
                70: FFT_in_inst_1_r_Wre_Wim <= (-157499215);
                71: FFT_in_inst_1_r_Wre_Wim <= (-183516943);
                72: FFT_in_inst_1_r_Wre_Wim <= (-209403589);
                73: FFT_in_inst_1_r_Wre_Wim <= (-235224690);
                74: FFT_in_inst_1_r_Wre_Wim <= (-260849173);
                75: FFT_in_inst_1_r_Wre_Wim <= (-286342575);
                76: FFT_in_inst_1_r_Wre_Wim <= (-311639359);
                77: FFT_in_inst_1_r_Wre_Wim <= (-336739525);
                78: FFT_in_inst_1_r_Wre_Wim <= (-361708610);
                79: FFT_in_inst_1_r_Wre_Wim <= (-386415542);
                80: FFT_in_inst_1_r_Wre_Wim <= (-410860321);
                81: FFT_in_inst_1_r_Wre_Wim <= (-435042946);
                82: FFT_in_inst_1_r_Wre_Wim <= (-459028955);
                83: FFT_in_inst_1_r_Wre_Wim <= (-482687275);
                84: FFT_in_inst_1_r_Wre_Wim <= (-506083441);
                85: FFT_in_inst_1_r_Wre_Wim <= (-529217456);
                86: FFT_in_inst_1_r_Wre_Wim <= (-551958245);
                87: FFT_in_inst_1_r_Wre_Wim <= (-574371346);
                88: FFT_in_inst_1_r_Wre_Wim <= (-596456759);
                89: FFT_in_inst_1_r_Wre_Wim <= (-618214483);
                90: FFT_in_inst_1_r_Wre_Wim <= (-639578984);
                91: FFT_in_inst_1_r_Wre_Wim <= (-660550260);
                92: FFT_in_inst_1_r_Wre_Wim <= (-681128313);
                93: FFT_in_inst_1_r_Wre_Wim <= (-701313142);
                94: FFT_in_inst_1_r_Wre_Wim <= (-721039212);
                95: FFT_in_inst_1_r_Wre_Wim <= (-740306522);
                96: FFT_in_inst_1_r_Wre_Wim <= (-759180609);
                97: FFT_in_inst_1_r_Wre_Wim <= (-777595937);
                98: FFT_in_inst_1_r_Wre_Wim <= (-795552507);
                99: FFT_in_inst_1_r_Wre_Wim <= (-812984782);
                100: FFT_in_inst_1_r_Wre_Wim <= (-829958298);
                101: FFT_in_inst_1_r_Wre_Wim <= (-846407520);
                102: FFT_in_inst_1_r_Wre_Wim <= (-862397984);
                103: FFT_in_inst_1_r_Wre_Wim <= (-877798618);
                104: FFT_in_inst_1_r_Wre_Wim <= (-892740494);
                105: FFT_in_inst_1_r_Wre_Wim <= (-907092541);
                106: FFT_in_inst_1_r_Wre_Wim <= (-920920295);
                107: FFT_in_inst_1_r_Wre_Wim <= (-934223756);
                108: FFT_in_inst_1_r_Wre_Wim <= (-946871851);
                109: FFT_in_inst_1_r_Wre_Wim <= (-959061190);
                110: FFT_in_inst_1_r_Wre_Wim <= (-970595165);
                111: FFT_in_inst_1_r_Wre_Wim <= (-981539311);
                112: FFT_in_inst_1_r_Wre_Wim <= (-991959166);
                113: FFT_in_inst_1_r_Wre_Wim <= (-1001723657);
                114: FFT_in_inst_1_r_Wre_Wim <= (-1010898320);
                115: FFT_in_inst_1_r_Wre_Wim <= (-1019483155);
                116: FFT_in_inst_1_r_Wre_Wim <= (-1027478164);
                117: FFT_in_inst_1_r_Wre_Wim <= (-1034817810);
                118: FFT_in_inst_1_r_Wre_Wim <= (-1041502093);
                119: FFT_in_inst_1_r_Wre_Wim <= (-1047596550);
                120: FFT_in_inst_1_r_Wre_Wim <= (-1053035644);
                121: FFT_in_inst_1_r_Wre_Wim <= (-1057884913);
                122: FFT_in_inst_1_r_Wre_Wim <= (-1062078820);
                123: FFT_in_inst_1_r_Wre_Wim <= (-1065617366);
                124: FFT_in_inst_1_r_Wre_Wim <= (-1068500550);
                125: FFT_in_inst_1_r_Wre_Wim <= (-1070793909);
                126: FFT_in_inst_1_r_Wre_Wim <= (-1072366372);
                default: FFT_in_inst_1_r_Wre_Wim <= (-1073349010);
            endcase
        end
        else begin
            FFT_in_inst_1_r_Dre_Wre <= (FFT_in_inst_1_w_Dre * $signed(FFT_in_inst_1_r_Wre_Wim[32-1:16]));
            FFT_in_inst_1_r_Dim_Wim <= (FFT_in_inst_1_w_Dim * $signed(FFT_in_inst_1_r_Wre_Wim[16-1:0]));
            FFT_in_inst_1_r_Dre_Wim <= (FFT_in_inst_1_w_Dre * $signed(FFT_in_inst_1_r_Wre_Wim[16-1:0]));
            FFT_in_inst_1_r_Dim_Wre <= (FFT_in_inst_1_w_Dim * $signed(FFT_in_inst_1_r_Wre_Wim[32-1:16]));
            FFT_in_inst_1_r_i_data[1] <= FFT_in_inst_1_r_i_data[0];
            FFT_in_inst_1_r_out_data[0] <= {FFT_in_inst_1_w_out_re0[17-1:1], FFT_in_inst_1_w_out_im0[17-1:1]};
            FFT_in_inst_1_r_out_data[1] <= {FFT_in_inst_1_w_out_re1[17-1:1], FFT_in_inst_1_w_out_im1[17-1:1]};
        end
    end
end



assign FFT_in_inst_1_w_Rim = $signed(FFT_in_inst_1_r_i_data[1][16-1:0]);


always @(FFT_in_inst_1_r_rd_addr[0], FFT_in_inst_1_r_rd_addr[1], FFT_in_r_log_val) begin: TB_FFT_IN_INST_1_INST_2
    case (FFT_in_r_log_val)
        'h1: begin
            FFT_in_inst_1_w_bit_reverse_rd_addr = {FFT_in_inst_1_r_rd_addr[0][7], FFT_in_inst_1_r_rd_addr[0][6], FFT_in_inst_1_r_rd_addr[0][5], FFT_in_inst_1_r_rd_addr[0][4], FFT_in_inst_1_r_rd_addr[0][3], FFT_in_inst_1_r_rd_addr[0][2], FFT_in_inst_1_r_rd_addr[0][1], FFT_in_inst_1_r_rd_addr[0][0]};
        end
        'h2: begin
            FFT_in_inst_1_w_bit_reverse_rd_addr = {FFT_in_inst_1_r_rd_addr[0][7], FFT_in_inst_1_r_rd_addr[0][6], FFT_in_inst_1_r_rd_addr[0][5], FFT_in_inst_1_r_rd_addr[0][4], FFT_in_inst_1_r_rd_addr[0][3], FFT_in_inst_1_r_rd_addr[0][2], FFT_in_inst_1_r_rd_addr[0][0], FFT_in_inst_1_r_rd_addr[0][1]};
        end
        'h3: begin
            FFT_in_inst_1_w_bit_reverse_rd_addr = {FFT_in_inst_1_r_rd_addr[0][7], FFT_in_inst_1_r_rd_addr[0][6], FFT_in_inst_1_r_rd_addr[0][5], FFT_in_inst_1_r_rd_addr[0][4], FFT_in_inst_1_r_rd_addr[0][3], FFT_in_inst_1_r_rd_addr[0][0], FFT_in_inst_1_r_rd_addr[0][1], FFT_in_inst_1_r_rd_addr[0][2]};
        end
        'h4: begin
            FFT_in_inst_1_w_bit_reverse_rd_addr = {FFT_in_inst_1_r_rd_addr[0][7], FFT_in_inst_1_r_rd_addr[0][6], FFT_in_inst_1_r_rd_addr[0][5], FFT_in_inst_1_r_rd_addr[0][4], FFT_in_inst_1_r_rd_addr[0][0], FFT_in_inst_1_r_rd_addr[0][1], FFT_in_inst_1_r_rd_addr[0][2], FFT_in_inst_1_r_rd_addr[0][3]};
        end
        'h5: begin
            FFT_in_inst_1_w_bit_reverse_rd_addr = {FFT_in_inst_1_r_rd_addr[0][7], FFT_in_inst_1_r_rd_addr[0][6], FFT_in_inst_1_r_rd_addr[0][5], FFT_in_inst_1_r_rd_addr[0][0], FFT_in_inst_1_r_rd_addr[0][1], FFT_in_inst_1_r_rd_addr[0][2], FFT_in_inst_1_r_rd_addr[0][3], FFT_in_inst_1_r_rd_addr[0][4]};
        end
        'h6: begin
            FFT_in_inst_1_w_bit_reverse_rd_addr = {FFT_in_inst_1_r_rd_addr[0][7], FFT_in_inst_1_r_rd_addr[0][6], FFT_in_inst_1_r_rd_addr[0][0], FFT_in_inst_1_r_rd_addr[0][1], FFT_in_inst_1_r_rd_addr[0][2], FFT_in_inst_1_r_rd_addr[0][3], FFT_in_inst_1_r_rd_addr[0][4], FFT_in_inst_1_r_rd_addr[0][5]};
        end
        'h7: begin
            FFT_in_inst_1_w_bit_reverse_rd_addr = {FFT_in_inst_1_r_rd_addr[0][7], FFT_in_inst_1_r_rd_addr[0][0], FFT_in_inst_1_r_rd_addr[0][1], FFT_in_inst_1_r_rd_addr[0][2], FFT_in_inst_1_r_rd_addr[0][3], FFT_in_inst_1_r_rd_addr[0][4], FFT_in_inst_1_r_rd_addr[0][5], FFT_in_inst_1_r_rd_addr[0][6]};
        end
        'h8: begin
            FFT_in_inst_1_w_bit_reverse_rd_addr = {FFT_in_inst_1_r_rd_addr[0][0], FFT_in_inst_1_r_rd_addr[0][1], FFT_in_inst_1_r_rd_addr[0][2], FFT_in_inst_1_r_rd_addr[0][3], FFT_in_inst_1_r_rd_addr[0][4], FFT_in_inst_1_r_rd_addr[0][5], FFT_in_inst_1_r_rd_addr[0][6], FFT_in_inst_1_r_rd_addr[0][7]};
        end
        default: begin
            FFT_in_inst_1_w_bit_reverse_rd_addr = 0;
        end
    endcase
end



assign FFT_in_o_w_union4_data = $signed(FFT_in_inst_1_r_out_data[FFT_in_inst_1_r_wr_addr[0]]);



assign FFT_in_o_w_union4_we = FFT_in_inst_1_r_we;



assign FFT_in_inst_1_w_Dim = $signed(FFT_in_o_w_dualram_data[16-1:0]);


always @(FFT_in_inst_1_r_wr_addr, FFT_in_r_log_val) begin: TB_FFT_IN_INST_1_F_BITREV_DATA_WR_ADDR
    case (FFT_in_r_log_val)
        'h1: begin
            FFT_in_inst_1_w_bit_reverse_wr_addr = {FFT_in_inst_1_r_wr_addr[7], FFT_in_inst_1_r_wr_addr[6], FFT_in_inst_1_r_wr_addr[5], FFT_in_inst_1_r_wr_addr[4], FFT_in_inst_1_r_wr_addr[3], FFT_in_inst_1_r_wr_addr[2], FFT_in_inst_1_r_wr_addr[1], FFT_in_inst_1_r_wr_addr[0]};
        end
        'h2: begin
            FFT_in_inst_1_w_bit_reverse_wr_addr = {FFT_in_inst_1_r_wr_addr[7], FFT_in_inst_1_r_wr_addr[6], FFT_in_inst_1_r_wr_addr[5], FFT_in_inst_1_r_wr_addr[4], FFT_in_inst_1_r_wr_addr[3], FFT_in_inst_1_r_wr_addr[2], FFT_in_inst_1_r_wr_addr[0], FFT_in_inst_1_r_wr_addr[1]};
        end
        'h3: begin
            FFT_in_inst_1_w_bit_reverse_wr_addr = {FFT_in_inst_1_r_wr_addr[7], FFT_in_inst_1_r_wr_addr[6], FFT_in_inst_1_r_wr_addr[5], FFT_in_inst_1_r_wr_addr[4], FFT_in_inst_1_r_wr_addr[3], FFT_in_inst_1_r_wr_addr[0], FFT_in_inst_1_r_wr_addr[1], FFT_in_inst_1_r_wr_addr[2]};
        end
        'h4: begin
            FFT_in_inst_1_w_bit_reverse_wr_addr = {FFT_in_inst_1_r_wr_addr[7], FFT_in_inst_1_r_wr_addr[6], FFT_in_inst_1_r_wr_addr[5], FFT_in_inst_1_r_wr_addr[4], FFT_in_inst_1_r_wr_addr[0], FFT_in_inst_1_r_wr_addr[1], FFT_in_inst_1_r_wr_addr[2], FFT_in_inst_1_r_wr_addr[3]};
        end
        'h5: begin
            FFT_in_inst_1_w_bit_reverse_wr_addr = {FFT_in_inst_1_r_wr_addr[7], FFT_in_inst_1_r_wr_addr[6], FFT_in_inst_1_r_wr_addr[5], FFT_in_inst_1_r_wr_addr[0], FFT_in_inst_1_r_wr_addr[1], FFT_in_inst_1_r_wr_addr[2], FFT_in_inst_1_r_wr_addr[3], FFT_in_inst_1_r_wr_addr[4]};
        end
        'h6: begin
            FFT_in_inst_1_w_bit_reverse_wr_addr = {FFT_in_inst_1_r_wr_addr[7], FFT_in_inst_1_r_wr_addr[6], FFT_in_inst_1_r_wr_addr[0], FFT_in_inst_1_r_wr_addr[1], FFT_in_inst_1_r_wr_addr[2], FFT_in_inst_1_r_wr_addr[3], FFT_in_inst_1_r_wr_addr[4], FFT_in_inst_1_r_wr_addr[5]};
        end
        'h7: begin
            FFT_in_inst_1_w_bit_reverse_wr_addr = {FFT_in_inst_1_r_wr_addr[7], FFT_in_inst_1_r_wr_addr[0], FFT_in_inst_1_r_wr_addr[1], FFT_in_inst_1_r_wr_addr[2], FFT_in_inst_1_r_wr_addr[3], FFT_in_inst_1_r_wr_addr[4], FFT_in_inst_1_r_wr_addr[5], FFT_in_inst_1_r_wr_addr[6]};
        end
        'h8: begin
            FFT_in_inst_1_w_bit_reverse_wr_addr = {FFT_in_inst_1_r_wr_addr[0], FFT_in_inst_1_r_wr_addr[1], FFT_in_inst_1_r_wr_addr[2], FFT_in_inst_1_r_wr_addr[3], FFT_in_inst_1_r_wr_addr[4], FFT_in_inst_1_r_wr_addr[5], FFT_in_inst_1_r_wr_addr[6], FFT_in_inst_1_r_wr_addr[7]};
        end
        default: begin
            FFT_in_inst_1_w_bit_reverse_wr_addr = 0;
        end
    endcase
end


always @(FFT_in_inst_1_r_rd_addr[0], FFT_in_inst_1_r_rd_addr[1], FFT_in_r_log_val) begin: TB_FFT_IN_INST_1_F_BITREV_W_ADDR
    case (FFT_in_r_log_val)
        'h1: begin
            FFT_in_inst_1_w_bit_reverse_w_addr = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
        end
        'h2: begin
            FFT_in_inst_1_w_bit_reverse_w_addr = {FFT_in_inst_1_r_rd_addr[1][1], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
        end
        'h3: begin
            FFT_in_inst_1_w_bit_reverse_w_addr = {FFT_in_inst_1_r_rd_addr[1][1], FFT_in_inst_1_r_rd_addr[1][2], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
        end
        'h4: begin
            FFT_in_inst_1_w_bit_reverse_w_addr = {FFT_in_inst_1_r_rd_addr[1][1], FFT_in_inst_1_r_rd_addr[1][2], FFT_in_inst_1_r_rd_addr[1][3], 1'b0, 1'b0, 1'b0, 1'b0};
        end
        'h5: begin
            FFT_in_inst_1_w_bit_reverse_w_addr = {FFT_in_inst_1_r_rd_addr[1][1], FFT_in_inst_1_r_rd_addr[1][2], FFT_in_inst_1_r_rd_addr[1][3], FFT_in_inst_1_r_rd_addr[1][4], 1'b0, 1'b0, 1'b0};
        end
        'h6: begin
            FFT_in_inst_1_w_bit_reverse_w_addr = {FFT_in_inst_1_r_rd_addr[1][1], FFT_in_inst_1_r_rd_addr[1][2], FFT_in_inst_1_r_rd_addr[1][3], FFT_in_inst_1_r_rd_addr[1][4], FFT_in_inst_1_r_rd_addr[1][5], 1'b0, 1'b0};
        end
        'h7: begin
            FFT_in_inst_1_w_bit_reverse_w_addr = {FFT_in_inst_1_r_rd_addr[1][1], FFT_in_inst_1_r_rd_addr[1][2], FFT_in_inst_1_r_rd_addr[1][3], FFT_in_inst_1_r_rd_addr[1][4], FFT_in_inst_1_r_rd_addr[1][5], FFT_in_inst_1_r_rd_addr[1][6], 1'b0};
        end
        'h8: begin
            FFT_in_inst_1_w_bit_reverse_w_addr = {FFT_in_inst_1_r_rd_addr[1][1], FFT_in_inst_1_r_rd_addr[1][2], FFT_in_inst_1_r_rd_addr[1][3], FFT_in_inst_1_r_rd_addr[1][4], FFT_in_inst_1_r_rd_addr[1][5], FFT_in_inst_1_r_rd_addr[1][6], FFT_in_inst_1_r_rd_addr[1][7]};
        end
        default: begin
            FFT_in_inst_1_w_bit_reverse_w_addr = 0;
        end
    endcase
end



assign FFT_in_o_w_union4_rd_addr = FFT_in_inst_1_w_bit_reverse_rd_addr[8-1:0];


always @(posedge i_clk) begin: TB_FFT_IN_INST_1_F_SUM
    if ((FFT_in_r_en_un4 == 0)) begin
        FFT_in_inst_1_r_sum_re_plus <= 0;
        FFT_in_inst_1_r_sum_im_plus <= 0;
        FFT_in_inst_1_r_sum_re_minus <= 0;
        FFT_in_inst_1_r_sum_im_minus <= 0;
    end
    else begin
        FFT_in_inst_1_r_sum_re_plus <= (FFT_in_inst_1_w_Rre + FFT_in_inst_1_w_mult_re);
        FFT_in_inst_1_r_sum_im_plus <= (FFT_in_inst_1_w_Rim + FFT_in_inst_1_w_mult_im);
        FFT_in_inst_1_r_sum_re_minus <= (FFT_in_inst_1_w_Rre - FFT_in_inst_1_w_mult_re);
        FFT_in_inst_1_r_sum_im_minus <= (FFT_in_inst_1_w_Rim - FFT_in_inst_1_w_mult_im);
    end
end



assign FFT_in_inst_1_w_mult_re = ($signed(FFT_in_inst_1_r_Dre_Wre[(16 + 14)-1:14]) - $signed(FFT_in_inst_1_r_Dim_Wim[(16 + 14)-1:14]));
assign FFT_in_inst_1_w_mult_im = ($signed(FFT_in_inst_1_r_Dre_Wim[(16 + 14)-1:14]) + $signed(FFT_in_inst_1_r_Dim_Wre[(16 + 14)-1:14]));



assign FFT_in_o_w_union4_wr_addr = FFT_in_inst_1_w_bit_reverse_wr_addr[8-1:0];



assign FFT_in_inst_1_w_Rre = $signed(FFT_in_inst_1_r_i_data[1][32-1:16]);


always @(FFT_in_inst_1_r_sum_im_minus, FFT_in_inst_1_r_sum_re_minus, FFT_in_inst_1_r_sum_re_plus, FFT_in_inst_1_r_sum_im_plus) begin: TB_FFT_IN_INST_1_F_OUT_DATA
    if ((FFT_in_inst_1_r_sum_re_plus[16] == 1)) begin
        FFT_in_inst_1_w_out_re0 = (FFT_in_inst_1_r_sum_re_plus + 1'b1);
    end
    else begin
        FFT_in_inst_1_w_out_re0 = FFT_in_inst_1_r_sum_re_plus;
    end
    if ((FFT_in_inst_1_r_sum_im_plus[16] == 1)) begin
        FFT_in_inst_1_w_out_im0 = (FFT_in_inst_1_r_sum_im_plus + 1'b1);
    end
    else begin
        FFT_in_inst_1_w_out_im0 = FFT_in_inst_1_r_sum_im_plus;
    end
    if ((FFT_in_inst_1_r_sum_re_minus[16] == 1)) begin
        FFT_in_inst_1_w_out_re1 = (FFT_in_inst_1_r_sum_re_minus + 1'b1);
    end
    else begin
        FFT_in_inst_1_w_out_re1 = FFT_in_inst_1_r_sum_re_minus;
    end
    if ((FFT_in_inst_1_r_sum_im_minus[16] == 1)) begin
        FFT_in_inst_1_w_out_im1 = (FFT_in_inst_1_r_sum_im_minus + 1'b1);
    end
    else begin
        FFT_in_inst_1_w_out_im1 = FFT_in_inst_1_r_sum_im_minus;
    end
end



assign FFT_in_inst_1_w_Dre = $signed(FFT_in_o_w_dualram_data[32-1:16]);


always @(posedge i_clk) begin: TB_FFT_IN_INST_2
    if ((i_rst == 1)) begin
        FFT_in_r_state <= 5'b00001;
        FFT_in_r_cnt <= 0;
        FFT_in_r_log_val <= 0;
        FFT_in_r_en_un4 <= 0;
    end
    else begin
        casez (FFT_in_r_state)
            5'b????1: begin
                if (i_new_data) begin
                    FFT_in_r_cnt <= (FFT_in_r_cnt + 1);
                    if (($signed({1'b0, FFT_in_r_cnt}) == (64 - 1))) begin
                        FFT_in_r_state <= 5'b00010;
                    end
                end
            end
            5'b???1?: begin
                FFT_in_r_cnt <= 0;
                FFT_in_r_state <= 5'b00100;
            end
            5'b??1??: begin
                if (($signed({1'b0, FFT_in_i_w_muxed_wr_addr}) == (256 - 1))) begin
                    FFT_in_r_state <= 5'b10000;
                    FFT_in_r_log_val <= 1;
                end
            end
            5'b1????: begin
                FFT_in_r_en_un4 <= 1;
                if (($signed({1'b0, FFT_in_i_w_muxed_wr_addr}) == (256 - 1))) begin
                    FFT_in_r_en_un4 <= 0;
                    if ((FFT_in_r_log_val == 8)) begin
                        FFT_in_r_state <= 5'b00001;
                        FFT_in_r_log_val <= 0;
                    end
                    else begin
                        FFT_in_r_state <= 5'b10000;
                        FFT_in_r_log_val <= (FFT_in_r_log_val + 1'b1);
                    end
                end
            end
        endcase
    end
end



assign o_data = FFT_in_o_w_union4_data;


always @(FFT_in_r_log_val, FFT_in_i_w_muxed_we) begin: TB_FFT_IN_INST_4
    if ((FFT_in_r_log_val == 8)) begin
        o_union = FFT_in_i_w_muxed_we;
    end
    else begin
        o_union = 0;
    end
end


always @(FFT_in_o_w_shift_addr, FFT_in_r_state, FFT_in_o_w_union4_wr_addr) begin: TB_FFT_IN_INST_5
    if ((FFT_in_r_state == 5'b00100)) begin
        FFT_in_i_w_muxed_wr_addr = FFT_in_o_w_shift_addr;
    end
    else begin
        FFT_in_i_w_muxed_wr_addr = FFT_in_o_w_union4_wr_addr;
    end
end



assign o_addr = FFT_in_o_w_union4_wr_addr;



assign FFT_in_inst_7_w_ram_dout = FFT_in_inst_7_ram_r_dout;


always @(posedge i_clk) begin: TB_FFT_IN_INST_7_RAM_SEQ
    FFT_in_inst_7_ram_r_dout <= FFT_in_inst_7_ram_mem[FFT_in_inst_7_r_addr];
    if ((FFT_in_inst_7_r_we == 1)) begin
        FFT_in_inst_7_ram_mem[FFT_in_inst_7_r_addr] <= FFT_in_inst_7_w_ram_din;
    end
end



assign FFT_in_inst_7_w_rom_dout = FFT_in_inst_7_rom_r_dout;


always @(posedge i_clk) begin: TB_FFT_IN_INST_7_ROM_SEQ
    case (FFT_in_inst_7_r_addr)
        0: FFT_in_inst_7_rom_r_dout <= 16384;
        1: FFT_in_inst_7_rom_r_dout <= 16384;
        2: FFT_in_inst_7_rom_r_dout <= 16384;
        3: FFT_in_inst_7_rom_r_dout <= 16384;
        4: FFT_in_inst_7_rom_r_dout <= 16384;
        5: FFT_in_inst_7_rom_r_dout <= 16384;
        6: FFT_in_inst_7_rom_r_dout <= 16384;
        7: FFT_in_inst_7_rom_r_dout <= 16384;
        8: FFT_in_inst_7_rom_r_dout <= 16384;
        9: FFT_in_inst_7_rom_r_dout <= 16384;
        10: FFT_in_inst_7_rom_r_dout <= 16384;
        11: FFT_in_inst_7_rom_r_dout <= 16384;
        12: FFT_in_inst_7_rom_r_dout <= 16384;
        13: FFT_in_inst_7_rom_r_dout <= 16384;
        14: FFT_in_inst_7_rom_r_dout <= 16384;
        15: FFT_in_inst_7_rom_r_dout <= 16384;
        16: FFT_in_inst_7_rom_r_dout <= 16384;
        17: FFT_in_inst_7_rom_r_dout <= 16384;
        18: FFT_in_inst_7_rom_r_dout <= 16384;
        19: FFT_in_inst_7_rom_r_dout <= 16384;
        20: FFT_in_inst_7_rom_r_dout <= 16384;
        21: FFT_in_inst_7_rom_r_dout <= 16384;
        22: FFT_in_inst_7_rom_r_dout <= 16384;
        23: FFT_in_inst_7_rom_r_dout <= 16384;
        24: FFT_in_inst_7_rom_r_dout <= 16384;
        25: FFT_in_inst_7_rom_r_dout <= 16384;
        26: FFT_in_inst_7_rom_r_dout <= 16384;
        27: FFT_in_inst_7_rom_r_dout <= 16384;
        28: FFT_in_inst_7_rom_r_dout <= 16384;
        29: FFT_in_inst_7_rom_r_dout <= 16384;
        30: FFT_in_inst_7_rom_r_dout <= 16384;
        31: FFT_in_inst_7_rom_r_dout <= 16384;
        32: FFT_in_inst_7_rom_r_dout <= 16384;
        33: FFT_in_inst_7_rom_r_dout <= 16384;
        34: FFT_in_inst_7_rom_r_dout <= 16384;
        35: FFT_in_inst_7_rom_r_dout <= 16384;
        36: FFT_in_inst_7_rom_r_dout <= 16384;
        37: FFT_in_inst_7_rom_r_dout <= 16384;
        38: FFT_in_inst_7_rom_r_dout <= 16384;
        39: FFT_in_inst_7_rom_r_dout <= 16384;
        40: FFT_in_inst_7_rom_r_dout <= 16384;
        41: FFT_in_inst_7_rom_r_dout <= 16384;
        42: FFT_in_inst_7_rom_r_dout <= 16384;
        43: FFT_in_inst_7_rom_r_dout <= 16384;
        44: FFT_in_inst_7_rom_r_dout <= 16384;
        45: FFT_in_inst_7_rom_r_dout <= 16384;
        46: FFT_in_inst_7_rom_r_dout <= 16384;
        47: FFT_in_inst_7_rom_r_dout <= 16384;
        48: FFT_in_inst_7_rom_r_dout <= 16384;
        49: FFT_in_inst_7_rom_r_dout <= 16384;
        50: FFT_in_inst_7_rom_r_dout <= 16384;
        51: FFT_in_inst_7_rom_r_dout <= 16384;
        52: FFT_in_inst_7_rom_r_dout <= 16384;
        53: FFT_in_inst_7_rom_r_dout <= 16384;
        54: FFT_in_inst_7_rom_r_dout <= 16384;
        55: FFT_in_inst_7_rom_r_dout <= 16384;
        56: FFT_in_inst_7_rom_r_dout <= 16384;
        57: FFT_in_inst_7_rom_r_dout <= 16384;
        58: FFT_in_inst_7_rom_r_dout <= 16384;
        59: FFT_in_inst_7_rom_r_dout <= 16384;
        60: FFT_in_inst_7_rom_r_dout <= 16384;
        61: FFT_in_inst_7_rom_r_dout <= 16384;
        62: FFT_in_inst_7_rom_r_dout <= 16384;
        63: FFT_in_inst_7_rom_r_dout <= 16384;
        64: FFT_in_inst_7_rom_r_dout <= 16384;
        65: FFT_in_inst_7_rom_r_dout <= 16384;
        66: FFT_in_inst_7_rom_r_dout <= 16384;
        67: FFT_in_inst_7_rom_r_dout <= 16384;
        68: FFT_in_inst_7_rom_r_dout <= 16384;
        69: FFT_in_inst_7_rom_r_dout <= 16384;
        70: FFT_in_inst_7_rom_r_dout <= 16384;
        71: FFT_in_inst_7_rom_r_dout <= 16384;
        72: FFT_in_inst_7_rom_r_dout <= 16384;
        73: FFT_in_inst_7_rom_r_dout <= 16384;
        74: FFT_in_inst_7_rom_r_dout <= 16384;
        75: FFT_in_inst_7_rom_r_dout <= 16384;
        76: FFT_in_inst_7_rom_r_dout <= 16384;
        77: FFT_in_inst_7_rom_r_dout <= 16384;
        78: FFT_in_inst_7_rom_r_dout <= 16384;
        79: FFT_in_inst_7_rom_r_dout <= 16384;
        80: FFT_in_inst_7_rom_r_dout <= 16384;
        81: FFT_in_inst_7_rom_r_dout <= 16384;
        82: FFT_in_inst_7_rom_r_dout <= 16384;
        83: FFT_in_inst_7_rom_r_dout <= 16384;
        84: FFT_in_inst_7_rom_r_dout <= 16384;
        85: FFT_in_inst_7_rom_r_dout <= 16384;
        86: FFT_in_inst_7_rom_r_dout <= 16384;
        87: FFT_in_inst_7_rom_r_dout <= 16384;
        88: FFT_in_inst_7_rom_r_dout <= 16384;
        89: FFT_in_inst_7_rom_r_dout <= 16384;
        90: FFT_in_inst_7_rom_r_dout <= 16384;
        91: FFT_in_inst_7_rom_r_dout <= 16384;
        92: FFT_in_inst_7_rom_r_dout <= 16384;
        93: FFT_in_inst_7_rom_r_dout <= 16384;
        94: FFT_in_inst_7_rom_r_dout <= 16384;
        95: FFT_in_inst_7_rom_r_dout <= 16384;
        96: FFT_in_inst_7_rom_r_dout <= 16384;
        97: FFT_in_inst_7_rom_r_dout <= 16384;
        98: FFT_in_inst_7_rom_r_dout <= 16384;
        99: FFT_in_inst_7_rom_r_dout <= 16384;
        100: FFT_in_inst_7_rom_r_dout <= 16384;
        101: FFT_in_inst_7_rom_r_dout <= 16384;
        102: FFT_in_inst_7_rom_r_dout <= 16384;
        103: FFT_in_inst_7_rom_r_dout <= 16384;
        104: FFT_in_inst_7_rom_r_dout <= 16384;
        105: FFT_in_inst_7_rom_r_dout <= 16384;
        106: FFT_in_inst_7_rom_r_dout <= 16384;
        107: FFT_in_inst_7_rom_r_dout <= 16384;
        108: FFT_in_inst_7_rom_r_dout <= 16384;
        109: FFT_in_inst_7_rom_r_dout <= 16384;
        110: FFT_in_inst_7_rom_r_dout <= 16384;
        111: FFT_in_inst_7_rom_r_dout <= 16384;
        112: FFT_in_inst_7_rom_r_dout <= 16384;
        113: FFT_in_inst_7_rom_r_dout <= 16384;
        114: FFT_in_inst_7_rom_r_dout <= 16384;
        115: FFT_in_inst_7_rom_r_dout <= 16384;
        116: FFT_in_inst_7_rom_r_dout <= 16384;
        117: FFT_in_inst_7_rom_r_dout <= 16384;
        118: FFT_in_inst_7_rom_r_dout <= 16384;
        119: FFT_in_inst_7_rom_r_dout <= 16384;
        120: FFT_in_inst_7_rom_r_dout <= 16384;
        121: FFT_in_inst_7_rom_r_dout <= 16384;
        122: FFT_in_inst_7_rom_r_dout <= 16384;
        123: FFT_in_inst_7_rom_r_dout <= 16384;
        124: FFT_in_inst_7_rom_r_dout <= 16384;
        125: FFT_in_inst_7_rom_r_dout <= 16384;
        126: FFT_in_inst_7_rom_r_dout <= 16384;
        127: FFT_in_inst_7_rom_r_dout <= 16384;
        128: FFT_in_inst_7_rom_r_dout <= 16384;
        129: FFT_in_inst_7_rom_r_dout <= 16384;
        130: FFT_in_inst_7_rom_r_dout <= 16384;
        131: FFT_in_inst_7_rom_r_dout <= 16384;
        132: FFT_in_inst_7_rom_r_dout <= 16384;
        133: FFT_in_inst_7_rom_r_dout <= 16384;
        134: FFT_in_inst_7_rom_r_dout <= 16384;
        135: FFT_in_inst_7_rom_r_dout <= 16384;
        136: FFT_in_inst_7_rom_r_dout <= 16384;
        137: FFT_in_inst_7_rom_r_dout <= 16384;
        138: FFT_in_inst_7_rom_r_dout <= 16384;
        139: FFT_in_inst_7_rom_r_dout <= 16384;
        140: FFT_in_inst_7_rom_r_dout <= 16384;
        141: FFT_in_inst_7_rom_r_dout <= 16384;
        142: FFT_in_inst_7_rom_r_dout <= 16384;
        143: FFT_in_inst_7_rom_r_dout <= 16384;
        144: FFT_in_inst_7_rom_r_dout <= 16384;
        145: FFT_in_inst_7_rom_r_dout <= 16384;
        146: FFT_in_inst_7_rom_r_dout <= 16384;
        147: FFT_in_inst_7_rom_r_dout <= 16384;
        148: FFT_in_inst_7_rom_r_dout <= 16384;
        149: FFT_in_inst_7_rom_r_dout <= 16384;
        150: FFT_in_inst_7_rom_r_dout <= 16384;
        151: FFT_in_inst_7_rom_r_dout <= 16384;
        152: FFT_in_inst_7_rom_r_dout <= 16384;
        153: FFT_in_inst_7_rom_r_dout <= 16384;
        154: FFT_in_inst_7_rom_r_dout <= 16384;
        155: FFT_in_inst_7_rom_r_dout <= 16384;
        156: FFT_in_inst_7_rom_r_dout <= 16384;
        157: FFT_in_inst_7_rom_r_dout <= 16384;
        158: FFT_in_inst_7_rom_r_dout <= 16384;
        159: FFT_in_inst_7_rom_r_dout <= 16384;
        160: FFT_in_inst_7_rom_r_dout <= 16384;
        161: FFT_in_inst_7_rom_r_dout <= 16384;
        162: FFT_in_inst_7_rom_r_dout <= 16384;
        163: FFT_in_inst_7_rom_r_dout <= 16384;
        164: FFT_in_inst_7_rom_r_dout <= 16384;
        165: FFT_in_inst_7_rom_r_dout <= 16384;
        166: FFT_in_inst_7_rom_r_dout <= 16384;
        167: FFT_in_inst_7_rom_r_dout <= 16384;
        168: FFT_in_inst_7_rom_r_dout <= 16384;
        169: FFT_in_inst_7_rom_r_dout <= 16384;
        170: FFT_in_inst_7_rom_r_dout <= 16384;
        171: FFT_in_inst_7_rom_r_dout <= 16384;
        172: FFT_in_inst_7_rom_r_dout <= 16384;
        173: FFT_in_inst_7_rom_r_dout <= 16384;
        174: FFT_in_inst_7_rom_r_dout <= 16384;
        175: FFT_in_inst_7_rom_r_dout <= 16384;
        176: FFT_in_inst_7_rom_r_dout <= 16384;
        177: FFT_in_inst_7_rom_r_dout <= 16384;
        178: FFT_in_inst_7_rom_r_dout <= 16384;
        179: FFT_in_inst_7_rom_r_dout <= 16384;
        180: FFT_in_inst_7_rom_r_dout <= 16384;
        181: FFT_in_inst_7_rom_r_dout <= 16384;
        182: FFT_in_inst_7_rom_r_dout <= 16384;
        183: FFT_in_inst_7_rom_r_dout <= 16384;
        184: FFT_in_inst_7_rom_r_dout <= 16384;
        185: FFT_in_inst_7_rom_r_dout <= 16384;
        186: FFT_in_inst_7_rom_r_dout <= 16384;
        187: FFT_in_inst_7_rom_r_dout <= 16384;
        188: FFT_in_inst_7_rom_r_dout <= 16384;
        189: FFT_in_inst_7_rom_r_dout <= 16384;
        190: FFT_in_inst_7_rom_r_dout <= 16384;
        191: FFT_in_inst_7_rom_r_dout <= 16384;
        192: FFT_in_inst_7_rom_r_dout <= 16384;
        193: FFT_in_inst_7_rom_r_dout <= 16384;
        194: FFT_in_inst_7_rom_r_dout <= 16384;
        195: FFT_in_inst_7_rom_r_dout <= 16384;
        196: FFT_in_inst_7_rom_r_dout <= 16384;
        197: FFT_in_inst_7_rom_r_dout <= 16384;
        198: FFT_in_inst_7_rom_r_dout <= 16384;
        199: FFT_in_inst_7_rom_r_dout <= 16384;
        200: FFT_in_inst_7_rom_r_dout <= 16384;
        201: FFT_in_inst_7_rom_r_dout <= 16384;
        202: FFT_in_inst_7_rom_r_dout <= 16384;
        203: FFT_in_inst_7_rom_r_dout <= 16384;
        204: FFT_in_inst_7_rom_r_dout <= 16384;
        205: FFT_in_inst_7_rom_r_dout <= 16384;
        206: FFT_in_inst_7_rom_r_dout <= 16384;
        207: FFT_in_inst_7_rom_r_dout <= 16384;
        208: FFT_in_inst_7_rom_r_dout <= 16384;
        209: FFT_in_inst_7_rom_r_dout <= 16384;
        210: FFT_in_inst_7_rom_r_dout <= 16384;
        211: FFT_in_inst_7_rom_r_dout <= 16384;
        212: FFT_in_inst_7_rom_r_dout <= 16384;
        213: FFT_in_inst_7_rom_r_dout <= 16384;
        214: FFT_in_inst_7_rom_r_dout <= 16384;
        215: FFT_in_inst_7_rom_r_dout <= 16384;
        216: FFT_in_inst_7_rom_r_dout <= 16384;
        217: FFT_in_inst_7_rom_r_dout <= 16384;
        218: FFT_in_inst_7_rom_r_dout <= 16384;
        219: FFT_in_inst_7_rom_r_dout <= 16384;
        220: FFT_in_inst_7_rom_r_dout <= 16384;
        221: FFT_in_inst_7_rom_r_dout <= 16384;
        222: FFT_in_inst_7_rom_r_dout <= 16384;
        223: FFT_in_inst_7_rom_r_dout <= 16384;
        224: FFT_in_inst_7_rom_r_dout <= 16384;
        225: FFT_in_inst_7_rom_r_dout <= 16384;
        226: FFT_in_inst_7_rom_r_dout <= 16384;
        227: FFT_in_inst_7_rom_r_dout <= 16384;
        228: FFT_in_inst_7_rom_r_dout <= 16384;
        229: FFT_in_inst_7_rom_r_dout <= 16384;
        230: FFT_in_inst_7_rom_r_dout <= 16384;
        231: FFT_in_inst_7_rom_r_dout <= 16384;
        232: FFT_in_inst_7_rom_r_dout <= 16384;
        233: FFT_in_inst_7_rom_r_dout <= 16384;
        234: FFT_in_inst_7_rom_r_dout <= 16384;
        235: FFT_in_inst_7_rom_r_dout <= 16384;
        236: FFT_in_inst_7_rom_r_dout <= 16384;
        237: FFT_in_inst_7_rom_r_dout <= 16384;
        238: FFT_in_inst_7_rom_r_dout <= 16384;
        239: FFT_in_inst_7_rom_r_dout <= 16384;
        240: FFT_in_inst_7_rom_r_dout <= 16384;
        241: FFT_in_inst_7_rom_r_dout <= 16384;
        242: FFT_in_inst_7_rom_r_dout <= 16384;
        243: FFT_in_inst_7_rom_r_dout <= 16384;
        244: FFT_in_inst_7_rom_r_dout <= 16384;
        245: FFT_in_inst_7_rom_r_dout <= 16384;
        246: FFT_in_inst_7_rom_r_dout <= 16384;
        247: FFT_in_inst_7_rom_r_dout <= 16384;
        248: FFT_in_inst_7_rom_r_dout <= 16384;
        249: FFT_in_inst_7_rom_r_dout <= 16384;
        250: FFT_in_inst_7_rom_r_dout <= 16384;
        251: FFT_in_inst_7_rom_r_dout <= 16384;
        252: FFT_in_inst_7_rom_r_dout <= 16384;
        253: FFT_in_inst_7_rom_r_dout <= 16384;
        254: FFT_in_inst_7_rom_r_dout <= 16384;
        default: FFT_in_inst_7_rom_r_dout <= 16384;
    endcase
end


always @(posedge i_clk) begin: TB_FFT_IN_INST_7_SEQ
    if ((i_rst == 1)) begin
        FFT_in_inst_7_r_shift_addr <= 0;
        FFT_in_inst_7_r_shift_dout <= 0;
        FFT_in_inst_7_r_shift_act <= 0;
        FFT_in_inst_7_r_we <= 0;
        FFT_in_inst_7_r_addr <= 0;
    end
    else if ((i_en == 1)) begin
        FFT_in_inst_7_r_shift_addr <= FFT_in_inst_7_r_addr;
        FFT_in_inst_7_r_shift_act <= FFT_in_inst_7_r_we;
        FFT_in_inst_7_r_shift_dout <= FFT_in_inst_7_w_ram_din;
        if (i_new_data) begin
            FFT_in_inst_7_r_we <= 1;
            FFT_in_inst_7_r_addr <= 0;
        end
        else begin
            if (($signed({1'b0, FFT_in_inst_7_r_addr}) != (256 - 1))) begin
                FFT_in_inst_7_r_addr <= (FFT_in_inst_7_r_addr + 1'b1);
                FFT_in_inst_7_r_we <= 1;
            end
            else begin
                FFT_in_inst_7_r_we <= 0;
            end
        end
    end
end


always @(FFT_in_inst_7_r_addr, i_data, FFT_in_inst_7_w_ram_dout) begin: TB_FFT_IN_INST_7_COMB
    if ((FFT_in_inst_7_r_addr == 0)) begin
        FFT_in_inst_7_w_ram_din = i_data;
    end
    else begin
        FFT_in_inst_7_w_ram_din = FFT_in_inst_7_w_ram_dout;
    end
end



assign FFT_in_o_w_shift_data = $signed(FFT_in_inst_7_w_mult[(16 + 14)-1:14]);



assign FFT_in_o_w_shift_active = FFT_in_inst_7_r_shift_act;


always @(FFT_in_inst_7_r_shift_addr) begin: TB_FFT_IN_INST_7_F_ADDR
    case (FFT_in_inst_7_r_shift_addr)
        0: FFT_in_o_w_shift_addr = 0;
        1: FFT_in_o_w_shift_addr = 128;
        2: FFT_in_o_w_shift_addr = 64;
        3: FFT_in_o_w_shift_addr = 192;
        4: FFT_in_o_w_shift_addr = 32;
        5: FFT_in_o_w_shift_addr = 160;
        6: FFT_in_o_w_shift_addr = 96;
        7: FFT_in_o_w_shift_addr = 224;
        8: FFT_in_o_w_shift_addr = 16;
        9: FFT_in_o_w_shift_addr = 144;
        10: FFT_in_o_w_shift_addr = 80;
        11: FFT_in_o_w_shift_addr = 208;
        12: FFT_in_o_w_shift_addr = 48;
        13: FFT_in_o_w_shift_addr = 176;
        14: FFT_in_o_w_shift_addr = 112;
        15: FFT_in_o_w_shift_addr = 240;
        16: FFT_in_o_w_shift_addr = 8;
        17: FFT_in_o_w_shift_addr = 136;
        18: FFT_in_o_w_shift_addr = 72;
        19: FFT_in_o_w_shift_addr = 200;
        20: FFT_in_o_w_shift_addr = 40;
        21: FFT_in_o_w_shift_addr = 168;
        22: FFT_in_o_w_shift_addr = 104;
        23: FFT_in_o_w_shift_addr = 232;
        24: FFT_in_o_w_shift_addr = 24;
        25: FFT_in_o_w_shift_addr = 152;
        26: FFT_in_o_w_shift_addr = 88;
        27: FFT_in_o_w_shift_addr = 216;
        28: FFT_in_o_w_shift_addr = 56;
        29: FFT_in_o_w_shift_addr = 184;
        30: FFT_in_o_w_shift_addr = 120;
        31: FFT_in_o_w_shift_addr = 248;
        32: FFT_in_o_w_shift_addr = 4;
        33: FFT_in_o_w_shift_addr = 132;
        34: FFT_in_o_w_shift_addr = 68;
        35: FFT_in_o_w_shift_addr = 196;
        36: FFT_in_o_w_shift_addr = 36;
        37: FFT_in_o_w_shift_addr = 164;
        38: FFT_in_o_w_shift_addr = 100;
        39: FFT_in_o_w_shift_addr = 228;
        40: FFT_in_o_w_shift_addr = 20;
        41: FFT_in_o_w_shift_addr = 148;
        42: FFT_in_o_w_shift_addr = 84;
        43: FFT_in_o_w_shift_addr = 212;
        44: FFT_in_o_w_shift_addr = 52;
        45: FFT_in_o_w_shift_addr = 180;
        46: FFT_in_o_w_shift_addr = 116;
        47: FFT_in_o_w_shift_addr = 244;
        48: FFT_in_o_w_shift_addr = 12;
        49: FFT_in_o_w_shift_addr = 140;
        50: FFT_in_o_w_shift_addr = 76;
        51: FFT_in_o_w_shift_addr = 204;
        52: FFT_in_o_w_shift_addr = 44;
        53: FFT_in_o_w_shift_addr = 172;
        54: FFT_in_o_w_shift_addr = 108;
        55: FFT_in_o_w_shift_addr = 236;
        56: FFT_in_o_w_shift_addr = 28;
        57: FFT_in_o_w_shift_addr = 156;
        58: FFT_in_o_w_shift_addr = 92;
        59: FFT_in_o_w_shift_addr = 220;
        60: FFT_in_o_w_shift_addr = 60;
        61: FFT_in_o_w_shift_addr = 188;
        62: FFT_in_o_w_shift_addr = 124;
        63: FFT_in_o_w_shift_addr = 252;
        64: FFT_in_o_w_shift_addr = 2;
        65: FFT_in_o_w_shift_addr = 130;
        66: FFT_in_o_w_shift_addr = 66;
        67: FFT_in_o_w_shift_addr = 194;
        68: FFT_in_o_w_shift_addr = 34;
        69: FFT_in_o_w_shift_addr = 162;
        70: FFT_in_o_w_shift_addr = 98;
        71: FFT_in_o_w_shift_addr = 226;
        72: FFT_in_o_w_shift_addr = 18;
        73: FFT_in_o_w_shift_addr = 146;
        74: FFT_in_o_w_shift_addr = 82;
        75: FFT_in_o_w_shift_addr = 210;
        76: FFT_in_o_w_shift_addr = 50;
        77: FFT_in_o_w_shift_addr = 178;
        78: FFT_in_o_w_shift_addr = 114;
        79: FFT_in_o_w_shift_addr = 242;
        80: FFT_in_o_w_shift_addr = 10;
        81: FFT_in_o_w_shift_addr = 138;
        82: FFT_in_o_w_shift_addr = 74;
        83: FFT_in_o_w_shift_addr = 202;
        84: FFT_in_o_w_shift_addr = 42;
        85: FFT_in_o_w_shift_addr = 170;
        86: FFT_in_o_w_shift_addr = 106;
        87: FFT_in_o_w_shift_addr = 234;
        88: FFT_in_o_w_shift_addr = 26;
        89: FFT_in_o_w_shift_addr = 154;
        90: FFT_in_o_w_shift_addr = 90;
        91: FFT_in_o_w_shift_addr = 218;
        92: FFT_in_o_w_shift_addr = 58;
        93: FFT_in_o_w_shift_addr = 186;
        94: FFT_in_o_w_shift_addr = 122;
        95: FFT_in_o_w_shift_addr = 250;
        96: FFT_in_o_w_shift_addr = 6;
        97: FFT_in_o_w_shift_addr = 134;
        98: FFT_in_o_w_shift_addr = 70;
        99: FFT_in_o_w_shift_addr = 198;
        100: FFT_in_o_w_shift_addr = 38;
        101: FFT_in_o_w_shift_addr = 166;
        102: FFT_in_o_w_shift_addr = 102;
        103: FFT_in_o_w_shift_addr = 230;
        104: FFT_in_o_w_shift_addr = 22;
        105: FFT_in_o_w_shift_addr = 150;
        106: FFT_in_o_w_shift_addr = 86;
        107: FFT_in_o_w_shift_addr = 214;
        108: FFT_in_o_w_shift_addr = 54;
        109: FFT_in_o_w_shift_addr = 182;
        110: FFT_in_o_w_shift_addr = 118;
        111: FFT_in_o_w_shift_addr = 246;
        112: FFT_in_o_w_shift_addr = 14;
        113: FFT_in_o_w_shift_addr = 142;
        114: FFT_in_o_w_shift_addr = 78;
        115: FFT_in_o_w_shift_addr = 206;
        116: FFT_in_o_w_shift_addr = 46;
        117: FFT_in_o_w_shift_addr = 174;
        118: FFT_in_o_w_shift_addr = 110;
        119: FFT_in_o_w_shift_addr = 238;
        120: FFT_in_o_w_shift_addr = 30;
        121: FFT_in_o_w_shift_addr = 158;
        122: FFT_in_o_w_shift_addr = 94;
        123: FFT_in_o_w_shift_addr = 222;
        124: FFT_in_o_w_shift_addr = 62;
        125: FFT_in_o_w_shift_addr = 190;
        126: FFT_in_o_w_shift_addr = 126;
        127: FFT_in_o_w_shift_addr = 254;
        128: FFT_in_o_w_shift_addr = 1;
        129: FFT_in_o_w_shift_addr = 129;
        130: FFT_in_o_w_shift_addr = 65;
        131: FFT_in_o_w_shift_addr = 193;
        132: FFT_in_o_w_shift_addr = 33;
        133: FFT_in_o_w_shift_addr = 161;
        134: FFT_in_o_w_shift_addr = 97;
        135: FFT_in_o_w_shift_addr = 225;
        136: FFT_in_o_w_shift_addr = 17;
        137: FFT_in_o_w_shift_addr = 145;
        138: FFT_in_o_w_shift_addr = 81;
        139: FFT_in_o_w_shift_addr = 209;
        140: FFT_in_o_w_shift_addr = 49;
        141: FFT_in_o_w_shift_addr = 177;
        142: FFT_in_o_w_shift_addr = 113;
        143: FFT_in_o_w_shift_addr = 241;
        144: FFT_in_o_w_shift_addr = 9;
        145: FFT_in_o_w_shift_addr = 137;
        146: FFT_in_o_w_shift_addr = 73;
        147: FFT_in_o_w_shift_addr = 201;
        148: FFT_in_o_w_shift_addr = 41;
        149: FFT_in_o_w_shift_addr = 169;
        150: FFT_in_o_w_shift_addr = 105;
        151: FFT_in_o_w_shift_addr = 233;
        152: FFT_in_o_w_shift_addr = 25;
        153: FFT_in_o_w_shift_addr = 153;
        154: FFT_in_o_w_shift_addr = 89;
        155: FFT_in_o_w_shift_addr = 217;
        156: FFT_in_o_w_shift_addr = 57;
        157: FFT_in_o_w_shift_addr = 185;
        158: FFT_in_o_w_shift_addr = 121;
        159: FFT_in_o_w_shift_addr = 249;
        160: FFT_in_o_w_shift_addr = 5;
        161: FFT_in_o_w_shift_addr = 133;
        162: FFT_in_o_w_shift_addr = 69;
        163: FFT_in_o_w_shift_addr = 197;
        164: FFT_in_o_w_shift_addr = 37;
        165: FFT_in_o_w_shift_addr = 165;
        166: FFT_in_o_w_shift_addr = 101;
        167: FFT_in_o_w_shift_addr = 229;
        168: FFT_in_o_w_shift_addr = 21;
        169: FFT_in_o_w_shift_addr = 149;
        170: FFT_in_o_w_shift_addr = 85;
        171: FFT_in_o_w_shift_addr = 213;
        172: FFT_in_o_w_shift_addr = 53;
        173: FFT_in_o_w_shift_addr = 181;
        174: FFT_in_o_w_shift_addr = 117;
        175: FFT_in_o_w_shift_addr = 245;
        176: FFT_in_o_w_shift_addr = 13;
        177: FFT_in_o_w_shift_addr = 141;
        178: FFT_in_o_w_shift_addr = 77;
        179: FFT_in_o_w_shift_addr = 205;
        180: FFT_in_o_w_shift_addr = 45;
        181: FFT_in_o_w_shift_addr = 173;
        182: FFT_in_o_w_shift_addr = 109;
        183: FFT_in_o_w_shift_addr = 237;
        184: FFT_in_o_w_shift_addr = 29;
        185: FFT_in_o_w_shift_addr = 157;
        186: FFT_in_o_w_shift_addr = 93;
        187: FFT_in_o_w_shift_addr = 221;
        188: FFT_in_o_w_shift_addr = 61;
        189: FFT_in_o_w_shift_addr = 189;
        190: FFT_in_o_w_shift_addr = 125;
        191: FFT_in_o_w_shift_addr = 253;
        192: FFT_in_o_w_shift_addr = 3;
        193: FFT_in_o_w_shift_addr = 131;
        194: FFT_in_o_w_shift_addr = 67;
        195: FFT_in_o_w_shift_addr = 195;
        196: FFT_in_o_w_shift_addr = 35;
        197: FFT_in_o_w_shift_addr = 163;
        198: FFT_in_o_w_shift_addr = 99;
        199: FFT_in_o_w_shift_addr = 227;
        200: FFT_in_o_w_shift_addr = 19;
        201: FFT_in_o_w_shift_addr = 147;
        202: FFT_in_o_w_shift_addr = 83;
        203: FFT_in_o_w_shift_addr = 211;
        204: FFT_in_o_w_shift_addr = 51;
        205: FFT_in_o_w_shift_addr = 179;
        206: FFT_in_o_w_shift_addr = 115;
        207: FFT_in_o_w_shift_addr = 243;
        208: FFT_in_o_w_shift_addr = 11;
        209: FFT_in_o_w_shift_addr = 139;
        210: FFT_in_o_w_shift_addr = 75;
        211: FFT_in_o_w_shift_addr = 203;
        212: FFT_in_o_w_shift_addr = 43;
        213: FFT_in_o_w_shift_addr = 171;
        214: FFT_in_o_w_shift_addr = 107;
        215: FFT_in_o_w_shift_addr = 235;
        216: FFT_in_o_w_shift_addr = 27;
        217: FFT_in_o_w_shift_addr = 155;
        218: FFT_in_o_w_shift_addr = 91;
        219: FFT_in_o_w_shift_addr = 219;
        220: FFT_in_o_w_shift_addr = 59;
        221: FFT_in_o_w_shift_addr = 187;
        222: FFT_in_o_w_shift_addr = 123;
        223: FFT_in_o_w_shift_addr = 251;
        224: FFT_in_o_w_shift_addr = 7;
        225: FFT_in_o_w_shift_addr = 135;
        226: FFT_in_o_w_shift_addr = 71;
        227: FFT_in_o_w_shift_addr = 199;
        228: FFT_in_o_w_shift_addr = 39;
        229: FFT_in_o_w_shift_addr = 167;
        230: FFT_in_o_w_shift_addr = 103;
        231: FFT_in_o_w_shift_addr = 231;
        232: FFT_in_o_w_shift_addr = 23;
        233: FFT_in_o_w_shift_addr = 151;
        234: FFT_in_o_w_shift_addr = 87;
        235: FFT_in_o_w_shift_addr = 215;
        236: FFT_in_o_w_shift_addr = 55;
        237: FFT_in_o_w_shift_addr = 183;
        238: FFT_in_o_w_shift_addr = 119;
        239: FFT_in_o_w_shift_addr = 247;
        240: FFT_in_o_w_shift_addr = 15;
        241: FFT_in_o_w_shift_addr = 143;
        242: FFT_in_o_w_shift_addr = 79;
        243: FFT_in_o_w_shift_addr = 207;
        244: FFT_in_o_w_shift_addr = 47;
        245: FFT_in_o_w_shift_addr = 175;
        246: FFT_in_o_w_shift_addr = 111;
        247: FFT_in_o_w_shift_addr = 239;
        248: FFT_in_o_w_shift_addr = 31;
        249: FFT_in_o_w_shift_addr = 159;
        250: FFT_in_o_w_shift_addr = 95;
        251: FFT_in_o_w_shift_addr = 223;
        252: FFT_in_o_w_shift_addr = 63;
        253: FFT_in_o_w_shift_addr = 191;
        254: FFT_in_o_w_shift_addr = 127;
        default: FFT_in_o_w_shift_addr = 255;
    endcase
end



assign FFT_in_inst_7_w_mult = (FFT_in_inst_7_r_shift_dout * FFT_in_inst_7_w_rom_dout);



assign FFT_in_o_w_dualram_data = FFT_in_fsm_dualram_r_dout;


always @(posedge i_clk) begin: TB_FFT_IN_FSM_DUALRAM_SEQ
    FFT_in_fsm_dualram_r_dout <= FFT_in_fsm_dualram_mem[FFT_in_i_w_muxed_rd_addr];
    if ((FFT_in_i_w_muxed_we == 1)) begin
        FFT_in_fsm_dualram_mem[FFT_in_i_w_muxed_wr_addr] <= FFT_in_i_w_muxed_data;
    end
end


always @(FFT_in_r_state, FFT_in_o_w_union4_rd_addr) begin: TB_FFT_IN_F_MUXED_RD_ADDR
    if ((FFT_in_r_state == 5'b00100)) begin
        FFT_in_i_w_muxed_rd_addr = 0;
    end
    else begin
        FFT_in_i_w_muxed_rd_addr = FFT_in_o_w_union4_rd_addr;
    end
end


always @(FFT_in_r_state, FFT_in_o_w_shift_active, FFT_in_o_w_union4_we) begin: TB_FFT_IN_F_MUXED_WE
    if ((FFT_in_r_state == 5'b00100)) begin
        FFT_in_i_w_muxed_we = FFT_in_o_w_shift_active;
    end
    else begin
        FFT_in_i_w_muxed_we = FFT_in_o_w_union4_we;
    end
end

endmodule
