// File: FFT_FSM.v
// Generated by MyHDL 0.8.1
// Date: Sun May 17 18:42:09 2015


`timescale 1ns/10ps

module FFT_FSM (
    i_clk,
    i_rst,
    i_en,
    i_new_data,
    i_data,
    o_dout,
    o_active_write,
    o_addr
);


input i_clk;
input i_rst;
input i_en;
input i_new_data;
input signed [15:0] i_data;
output signed [31:0] o_dout;
wire signed [31:0] o_dout;
output o_active_write;
reg o_active_write;
output [7:0] o_addr;
wire [7:0] o_addr;

reg [7:0] i_w_muxed_rd_addr;
reg i_w_muxed_we;
wire [7:0] o_w_union4_wr_addr;
wire o_w_shift_active;
reg [5:0] r_cnt;
wire signed [15:0] o_w_shift_data;
reg [7:0] i_w_muxed_wr_addr;
wire o_w_union4_we;
reg r_en_un4;
reg [4:0] r_state;
wire signed [31:0] o_w_union4_data;
wire signed [31:0] o_w_dualram_data;
reg [7:0] o_w_shift_addr;
reg signed [31:0] i_w_muxed_data;
wire [7:0] o_w_union4_rd_addr;
reg [3:0] r_log_val;
reg signed [31:0] inst_1_r_Dre_Wim;
wire signed [15:0] inst_1_w_Dim;
reg signed [16:0] inst_1_r_sum_re_minus;
reg signed [31:0] inst_1_r_Wre_Wim;
wire signed [15:0] inst_1_w_mult_im;
reg signed [16:0] inst_1_r_sum_im_plus;
reg signed [16:0] inst_1_r_sum_re_plus;
wire signed [15:0] inst_1_w_Rre;
wire signed [15:0] inst_1_w_mult_re;
reg [7:0] inst_1_r_wr_addr;
reg [7:0] inst_1_w_bit_reverse_wr_addr;
wire signed [15:0] inst_1_w_Dre;
reg [6:0] inst_1_w_bit_reverse_w_addr;
reg signed [15:0] inst_1_r_Wim;
reg signed [31:0] inst_1_r_Dre_Wre;
reg [7:0] inst_1_w_bit_reverse_rd_addr;
reg signed [15:0] inst_1_r_Wre;
reg inst_1_r_we;
reg signed [16:0] inst_1_w_out_re1;
reg signed [16:0] inst_1_w_out_re0;
reg signed [31:0] inst_1_r_Dim_Wre;
reg signed [31:0] inst_1_r_Dim_Wim;
reg signed [16:0] inst_1_r_sum_im_minus;
wire signed [15:0] inst_1_w_Rim;
reg signed [16:0] inst_1_w_out_im0;
reg signed [16:0] inst_1_w_out_im1;
reg signed [31:0] fsm_dualram_r_dout;
reg inst_7_r_shift_act;
reg inst_7_r_we;
wire signed [15:0] inst_7_w_rom_dout;
wire signed [15:0] inst_7_w_ram_dout;
wire signed [31:0] inst_7_w_mult;
reg signed [15:0] inst_7_r_shift_dout;
reg signed [15:0] inst_7_w_ram_din;
reg [7:0] inst_7_r_addr;
reg [7:0] inst_7_r_shift_addr;
reg signed [15:0] inst_7_rom_r_dout;
reg signed [15:0] inst_7_ram_r_dout;

reg [31:0] inst_1_r_out_data [0:2-1];
reg signed [31:0] inst_1_r_i_data [0:2-1];
reg [7:0] inst_1_r_rd_addr [0:2-1];
reg signed [31:0] fsm_dualram_mem [0:256-1];
reg signed [15:0] inst_7_ram_mem [0:256-1];




always @(o_w_shift_data, r_state, o_w_union4_data) begin: FFT_FSM_INST_0
    if ((r_state == 5'b00100)) begin
        i_w_muxed_data = (o_w_shift_data << 16);
    end
    else begin
        i_w_muxed_data = o_w_union4_data;
    end
end


always @(posedge i_clk) begin: FFT_FSM_INST_1_INST_0
    if ((r_en_un4 == 0)) begin
        inst_1_r_i_data[0] <= 0;
        inst_1_r_i_data[1] <= 0;
        inst_1_r_wr_addr <= 0;
        inst_1_r_rd_addr[0] <= 0;
        inst_1_r_rd_addr[1] <= 0;
        inst_1_r_out_data[0] <= 0;
        inst_1_r_out_data[1] <= 0;
        inst_1_r_we <= 0;
        inst_1_r_Wre <= 0;
        inst_1_r_Wim <= 0;
        inst_1_r_Dre_Wre <= 0;
        inst_1_r_Dim_Wim <= 0;
        inst_1_r_Dre_Wim <= 0;
        inst_1_r_Dim_Wre <= 0;
        inst_1_r_Wre_Wim <= 0;
    end
    else begin
        inst_1_r_rd_addr[1] <= inst_1_r_rd_addr[0];
        if (($signed({1'b0, inst_1_r_rd_addr[0]}) != (256 - 1))) begin
            inst_1_r_rd_addr[0] <= (inst_1_r_rd_addr[0] + 1'b1);
        end
        if ((inst_1_r_rd_addr[1] == 3)) begin
            inst_1_r_we <= 1;
        end
        if (($signed({1'b0, inst_1_r_wr_addr}) == (256 - 1))) begin
            inst_1_r_we <= 0;
        end
        if ((inst_1_r_we == 1)) begin
            inst_1_r_wr_addr <= (inst_1_r_wr_addr + 1'b1);
        end
        if ((inst_1_r_rd_addr[1][0] == 0)) begin
            inst_1_r_i_data[0] <= o_w_dualram_data;
            case (inst_1_w_bit_reverse_w_addr)
                0: inst_1_r_Wre_Wim <= 32'h40000000;
                1: inst_1_r_Wre_Wim <= 1073479278;
                2: inst_1_r_Wre_Wim <= 1072495836;
                3: inst_1_r_Wre_Wim <= 1070922571;
                4: inst_1_r_Wre_Wim <= 1068628410;
                5: inst_1_r_Wre_Wim <= 1065744426;
                6: inst_1_r_Wre_Wim <= 1062205084;
                7: inst_1_r_Wre_Wim <= 1058010383;
                8: inst_1_r_Wre_Wim <= 1053160324;
                9: inst_1_r_Wre_Wim <= 1047720442;
                10: inst_1_r_Wre_Wim <= 1041625203;
                11: inst_1_r_Wre_Wim <= 1034940142;
                12: inst_1_r_Wre_Wim <= 1027599724;
                13: inst_1_r_Wre_Wim <= 1019603949;
                14: inst_1_r_Wre_Wim <= 1011018352;
                15: inst_1_r_Wre_Wim <= 1001842935;
                16: inst_1_r_Wre_Wim <= 992077698;
                17: inst_1_r_Wre_Wim <= 981657105;
                18: inst_1_r_Wre_Wim <= 970712227;
                19: inst_1_r_Wre_Wim <= 959177530;
                20: inst_1_r_Wre_Wim <= 946987477;
                21: inst_1_r_Wre_Wim <= 934338676;
                22: inst_1_r_Wre_Wim <= 921034521;
                23: inst_1_r_Wre_Wim <= 907206083;
                24: inst_1_r_Wre_Wim <= 892853362;
                25: inst_1_r_Wre_Wim <= 877910822;
                26: inst_1_r_Wre_Wim <= 862509536;
                27: inst_1_r_Wre_Wim <= 846518432;
                28: inst_1_r_Wre_Wim <= 830068582;
                29: inst_1_r_Wre_Wim <= 813094450;
                30: inst_1_r_Wre_Wim <= 795661573;
                31: inst_1_r_Wre_Wim <= 777704415;
                32: inst_1_r_Wre_Wim <= 759288511;
                33: inst_1_r_Wre_Wim <= 740413862;
                34: inst_1_r_Wre_Wim <= 721146004;
                35: inst_1_r_Wre_Wim <= 701419402;
                36: inst_1_r_Wre_Wim <= 681234055;
                37: inst_1_r_Wre_Wim <= 660655500;
                38: inst_1_r_Wre_Wim <= 639683736;
                39: inst_1_r_Wre_Wim <= 618318765;
                40: inst_1_r_Wre_Wim <= 596560585;
                41: inst_1_r_Wre_Wim <= 574474734;
                42: inst_1_r_Wre_Wim <= 552061211;
                43: inst_1_r_Wre_Wim <= 529320016;
                44: inst_1_r_Wre_Wim <= 506185615;
                45: inst_1_r_Wre_Wim <= 482789077;
                46: inst_1_r_Wre_Wim <= 459130405;
                47: inst_1_r_Wre_Wim <= 435144062;
                48: inst_1_r_Wre_Wim <= 410961119;
                49: inst_1_r_Wre_Wim <= 386516042;
                50: inst_1_r_Wre_Wim <= 361808830;
                51: inst_1_r_Wre_Wim <= 336839483;
                52: inst_1_r_Wre_Wim <= 311739073;
                53: inst_1_r_Wre_Wim <= 286442065;
                54: inst_1_r_Wre_Wim <= 260948459;
                55: inst_1_r_Wre_Wim <= 235323790;
                56: inst_1_r_Wre_Wim <= 209502523;
                57: inst_1_r_Wre_Wim <= 183615729;
                58: inst_1_r_Wre_Wim <= 157597873;
                59: inst_1_r_Wre_Wim <= 131514491;
                60: inst_1_r_Wre_Wim <= 105300047;
                61: inst_1_r_Wre_Wim <= 79020076;
                62: inst_1_r_Wre_Wim <= 52740116;
                63: inst_1_r_Wre_Wim <= 26394629;
                64: inst_1_r_Wre_Wim <= 49152;
                65: inst_1_r_Wre_Wim <= (-26296315);
                66: inst_1_r_Wre_Wim <= (-52641772);
                67: inst_1_r_Wre_Wim <= (-78921684);
                68: inst_1_r_Wre_Wim <= (-105201585);
                69: inst_1_r_Wre_Wim <= (-131415941);
                70: inst_1_r_Wre_Wim <= (-157499215);
                71: inst_1_r_Wre_Wim <= (-183516943);
                72: inst_1_r_Wre_Wim <= (-209403589);
                73: inst_1_r_Wre_Wim <= (-235224690);
                74: inst_1_r_Wre_Wim <= (-260849173);
                75: inst_1_r_Wre_Wim <= (-286342575);
                76: inst_1_r_Wre_Wim <= (-311639359);
                77: inst_1_r_Wre_Wim <= (-336739525);
                78: inst_1_r_Wre_Wim <= (-361708610);
                79: inst_1_r_Wre_Wim <= (-386415542);
                80: inst_1_r_Wre_Wim <= (-410860321);
                81: inst_1_r_Wre_Wim <= (-435042946);
                82: inst_1_r_Wre_Wim <= (-459028955);
                83: inst_1_r_Wre_Wim <= (-482687275);
                84: inst_1_r_Wre_Wim <= (-506083441);
                85: inst_1_r_Wre_Wim <= (-529217456);
                86: inst_1_r_Wre_Wim <= (-551958245);
                87: inst_1_r_Wre_Wim <= (-574371346);
                88: inst_1_r_Wre_Wim <= (-596456759);
                89: inst_1_r_Wre_Wim <= (-618214483);
                90: inst_1_r_Wre_Wim <= (-639578984);
                91: inst_1_r_Wre_Wim <= (-660550260);
                92: inst_1_r_Wre_Wim <= (-681128313);
                93: inst_1_r_Wre_Wim <= (-701313142);
                94: inst_1_r_Wre_Wim <= (-721039212);
                95: inst_1_r_Wre_Wim <= (-740306522);
                96: inst_1_r_Wre_Wim <= (-759180609);
                97: inst_1_r_Wre_Wim <= (-777595937);
                98: inst_1_r_Wre_Wim <= (-795552507);
                99: inst_1_r_Wre_Wim <= (-812984782);
                100: inst_1_r_Wre_Wim <= (-829958298);
                101: inst_1_r_Wre_Wim <= (-846407520);
                102: inst_1_r_Wre_Wim <= (-862397984);
                103: inst_1_r_Wre_Wim <= (-877798618);
                104: inst_1_r_Wre_Wim <= (-892740494);
                105: inst_1_r_Wre_Wim <= (-907092541);
                106: inst_1_r_Wre_Wim <= (-920920295);
                107: inst_1_r_Wre_Wim <= (-934223756);
                108: inst_1_r_Wre_Wim <= (-946871851);
                109: inst_1_r_Wre_Wim <= (-959061190);
                110: inst_1_r_Wre_Wim <= (-970595165);
                111: inst_1_r_Wre_Wim <= (-981539311);
                112: inst_1_r_Wre_Wim <= (-991959166);
                113: inst_1_r_Wre_Wim <= (-1001723657);
                114: inst_1_r_Wre_Wim <= (-1010898320);
                115: inst_1_r_Wre_Wim <= (-1019483155);
                116: inst_1_r_Wre_Wim <= (-1027478164);
                117: inst_1_r_Wre_Wim <= (-1034817810);
                118: inst_1_r_Wre_Wim <= (-1041502093);
                119: inst_1_r_Wre_Wim <= (-1047596550);
                120: inst_1_r_Wre_Wim <= (-1053035644);
                121: inst_1_r_Wre_Wim <= (-1057884913);
                122: inst_1_r_Wre_Wim <= (-1062078820);
                123: inst_1_r_Wre_Wim <= (-1065617366);
                124: inst_1_r_Wre_Wim <= (-1068500550);
                125: inst_1_r_Wre_Wim <= (-1070793909);
                126: inst_1_r_Wre_Wim <= (-1072366372);
                default: inst_1_r_Wre_Wim <= (-1073349010);
            endcase
        end
        else begin
            inst_1_r_Dre_Wre <= (inst_1_w_Dre * $signed(inst_1_r_Wre_Wim[32-1:16]));
            inst_1_r_Dim_Wim <= (inst_1_w_Dim * $signed(inst_1_r_Wre_Wim[16-1:0]));
            inst_1_r_Dre_Wim <= (inst_1_w_Dre * $signed(inst_1_r_Wre_Wim[16-1:0]));
            inst_1_r_Dim_Wre <= (inst_1_w_Dim * $signed(inst_1_r_Wre_Wim[32-1:16]));
            inst_1_r_i_data[1] <= inst_1_r_i_data[0];
            inst_1_r_out_data[0] <= {inst_1_w_out_re0[17-1:1], inst_1_w_out_im0[17-1:1]};
            inst_1_r_out_data[1] <= {inst_1_w_out_re1[17-1:1], inst_1_w_out_im1[17-1:1]};
        end
    end
end



assign inst_1_w_Rim = $signed(inst_1_r_i_data[1][16-1:0]);


always @(inst_1_r_rd_addr[0], inst_1_r_rd_addr[1], r_log_val) begin: FFT_FSM_INST_1_INST_2
    case (r_log_val)
        'h1: begin
            inst_1_w_bit_reverse_rd_addr = {inst_1_r_rd_addr[0][7], inst_1_r_rd_addr[0][6], inst_1_r_rd_addr[0][5], inst_1_r_rd_addr[0][4], inst_1_r_rd_addr[0][3], inst_1_r_rd_addr[0][2], inst_1_r_rd_addr[0][1], inst_1_r_rd_addr[0][0]};
        end
        'h2: begin
            inst_1_w_bit_reverse_rd_addr = {inst_1_r_rd_addr[0][7], inst_1_r_rd_addr[0][6], inst_1_r_rd_addr[0][5], inst_1_r_rd_addr[0][4], inst_1_r_rd_addr[0][3], inst_1_r_rd_addr[0][2], inst_1_r_rd_addr[0][0], inst_1_r_rd_addr[0][1]};
        end
        'h3: begin
            inst_1_w_bit_reverse_rd_addr = {inst_1_r_rd_addr[0][7], inst_1_r_rd_addr[0][6], inst_1_r_rd_addr[0][5], inst_1_r_rd_addr[0][4], inst_1_r_rd_addr[0][3], inst_1_r_rd_addr[0][0], inst_1_r_rd_addr[0][1], inst_1_r_rd_addr[0][2]};
        end
        'h4: begin
            inst_1_w_bit_reverse_rd_addr = {inst_1_r_rd_addr[0][7], inst_1_r_rd_addr[0][6], inst_1_r_rd_addr[0][5], inst_1_r_rd_addr[0][4], inst_1_r_rd_addr[0][0], inst_1_r_rd_addr[0][1], inst_1_r_rd_addr[0][2], inst_1_r_rd_addr[0][3]};
        end
        'h5: begin
            inst_1_w_bit_reverse_rd_addr = {inst_1_r_rd_addr[0][7], inst_1_r_rd_addr[0][6], inst_1_r_rd_addr[0][5], inst_1_r_rd_addr[0][0], inst_1_r_rd_addr[0][1], inst_1_r_rd_addr[0][2], inst_1_r_rd_addr[0][3], inst_1_r_rd_addr[0][4]};
        end
        'h6: begin
            inst_1_w_bit_reverse_rd_addr = {inst_1_r_rd_addr[0][7], inst_1_r_rd_addr[0][6], inst_1_r_rd_addr[0][0], inst_1_r_rd_addr[0][1], inst_1_r_rd_addr[0][2], inst_1_r_rd_addr[0][3], inst_1_r_rd_addr[0][4], inst_1_r_rd_addr[0][5]};
        end
        'h7: begin
            inst_1_w_bit_reverse_rd_addr = {inst_1_r_rd_addr[0][7], inst_1_r_rd_addr[0][0], inst_1_r_rd_addr[0][1], inst_1_r_rd_addr[0][2], inst_1_r_rd_addr[0][3], inst_1_r_rd_addr[0][4], inst_1_r_rd_addr[0][5], inst_1_r_rd_addr[0][6]};
        end
        'h8: begin
            inst_1_w_bit_reverse_rd_addr = {inst_1_r_rd_addr[0][0], inst_1_r_rd_addr[0][1], inst_1_r_rd_addr[0][2], inst_1_r_rd_addr[0][3], inst_1_r_rd_addr[0][4], inst_1_r_rd_addr[0][5], inst_1_r_rd_addr[0][6], inst_1_r_rd_addr[0][7]};
        end
        default: begin
            inst_1_w_bit_reverse_rd_addr = 0;
        end
    endcase
end



assign o_w_union4_data = $signed(inst_1_r_out_data[inst_1_r_wr_addr[0]]);



assign o_w_union4_we = inst_1_r_we;



assign inst_1_w_Dim = $signed(o_w_dualram_data[16-1:0]);


always @(inst_1_r_wr_addr, r_log_val) begin: FFT_FSM_INST_1_F_BITREV_DATA_WR_ADDR
    case (r_log_val)
        'h1: begin
            inst_1_w_bit_reverse_wr_addr = {inst_1_r_wr_addr[7], inst_1_r_wr_addr[6], inst_1_r_wr_addr[5], inst_1_r_wr_addr[4], inst_1_r_wr_addr[3], inst_1_r_wr_addr[2], inst_1_r_wr_addr[1], inst_1_r_wr_addr[0]};
        end
        'h2: begin
            inst_1_w_bit_reverse_wr_addr = {inst_1_r_wr_addr[7], inst_1_r_wr_addr[6], inst_1_r_wr_addr[5], inst_1_r_wr_addr[4], inst_1_r_wr_addr[3], inst_1_r_wr_addr[2], inst_1_r_wr_addr[0], inst_1_r_wr_addr[1]};
        end
        'h3: begin
            inst_1_w_bit_reverse_wr_addr = {inst_1_r_wr_addr[7], inst_1_r_wr_addr[6], inst_1_r_wr_addr[5], inst_1_r_wr_addr[4], inst_1_r_wr_addr[3], inst_1_r_wr_addr[0], inst_1_r_wr_addr[1], inst_1_r_wr_addr[2]};
        end
        'h4: begin
            inst_1_w_bit_reverse_wr_addr = {inst_1_r_wr_addr[7], inst_1_r_wr_addr[6], inst_1_r_wr_addr[5], inst_1_r_wr_addr[4], inst_1_r_wr_addr[0], inst_1_r_wr_addr[1], inst_1_r_wr_addr[2], inst_1_r_wr_addr[3]};
        end
        'h5: begin
            inst_1_w_bit_reverse_wr_addr = {inst_1_r_wr_addr[7], inst_1_r_wr_addr[6], inst_1_r_wr_addr[5], inst_1_r_wr_addr[0], inst_1_r_wr_addr[1], inst_1_r_wr_addr[2], inst_1_r_wr_addr[3], inst_1_r_wr_addr[4]};
        end
        'h6: begin
            inst_1_w_bit_reverse_wr_addr = {inst_1_r_wr_addr[7], inst_1_r_wr_addr[6], inst_1_r_wr_addr[0], inst_1_r_wr_addr[1], inst_1_r_wr_addr[2], inst_1_r_wr_addr[3], inst_1_r_wr_addr[4], inst_1_r_wr_addr[5]};
        end
        'h7: begin
            inst_1_w_bit_reverse_wr_addr = {inst_1_r_wr_addr[7], inst_1_r_wr_addr[0], inst_1_r_wr_addr[1], inst_1_r_wr_addr[2], inst_1_r_wr_addr[3], inst_1_r_wr_addr[4], inst_1_r_wr_addr[5], inst_1_r_wr_addr[6]};
        end
        'h8: begin
            inst_1_w_bit_reverse_wr_addr = {inst_1_r_wr_addr[0], inst_1_r_wr_addr[1], inst_1_r_wr_addr[2], inst_1_r_wr_addr[3], inst_1_r_wr_addr[4], inst_1_r_wr_addr[5], inst_1_r_wr_addr[6], inst_1_r_wr_addr[7]};
        end
        default: begin
            inst_1_w_bit_reverse_wr_addr = 0;
        end
    endcase
end


always @(inst_1_r_rd_addr[0], inst_1_r_rd_addr[1], r_log_val) begin: FFT_FSM_INST_1_F_BITREV_W_ADDR
    case (r_log_val)
        'h1: begin
            inst_1_w_bit_reverse_w_addr = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
        end
        'h2: begin
            inst_1_w_bit_reverse_w_addr = {inst_1_r_rd_addr[1][1], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
        end
        'h3: begin
            inst_1_w_bit_reverse_w_addr = {inst_1_r_rd_addr[1][1], inst_1_r_rd_addr[1][2], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
        end
        'h4: begin
            inst_1_w_bit_reverse_w_addr = {inst_1_r_rd_addr[1][1], inst_1_r_rd_addr[1][2], inst_1_r_rd_addr[1][3], 1'b0, 1'b0, 1'b0, 1'b0};
        end
        'h5: begin
            inst_1_w_bit_reverse_w_addr = {inst_1_r_rd_addr[1][1], inst_1_r_rd_addr[1][2], inst_1_r_rd_addr[1][3], inst_1_r_rd_addr[1][4], 1'b0, 1'b0, 1'b0};
        end
        'h6: begin
            inst_1_w_bit_reverse_w_addr = {inst_1_r_rd_addr[1][1], inst_1_r_rd_addr[1][2], inst_1_r_rd_addr[1][3], inst_1_r_rd_addr[1][4], inst_1_r_rd_addr[1][5], 1'b0, 1'b0};
        end
        'h7: begin
            inst_1_w_bit_reverse_w_addr = {inst_1_r_rd_addr[1][1], inst_1_r_rd_addr[1][2], inst_1_r_rd_addr[1][3], inst_1_r_rd_addr[1][4], inst_1_r_rd_addr[1][5], inst_1_r_rd_addr[1][6], 1'b0};
        end
        'h8: begin
            inst_1_w_bit_reverse_w_addr = {inst_1_r_rd_addr[1][1], inst_1_r_rd_addr[1][2], inst_1_r_rd_addr[1][3], inst_1_r_rd_addr[1][4], inst_1_r_rd_addr[1][5], inst_1_r_rd_addr[1][6], inst_1_r_rd_addr[1][7]};
        end
        default: begin
            inst_1_w_bit_reverse_w_addr = 0;
        end
    endcase
end



assign o_w_union4_rd_addr = inst_1_w_bit_reverse_rd_addr[8-1:0];


always @(posedge i_clk) begin: FFT_FSM_INST_1_F_SUM
    if ((r_en_un4 == 0)) begin
        inst_1_r_sum_re_plus <= 0;
        inst_1_r_sum_im_plus <= 0;
        inst_1_r_sum_re_minus <= 0;
        inst_1_r_sum_im_minus <= 0;
    end
    else begin
        inst_1_r_sum_re_plus <= (inst_1_w_Rre + inst_1_w_mult_re);
        inst_1_r_sum_im_plus <= (inst_1_w_Rim + inst_1_w_mult_im);
        inst_1_r_sum_re_minus <= (inst_1_w_Rre - inst_1_w_mult_re);
        inst_1_r_sum_im_minus <= (inst_1_w_Rim - inst_1_w_mult_im);
    end
end



assign inst_1_w_mult_re = ($signed(inst_1_r_Dre_Wre[(16 + 14)-1:14]) - $signed(inst_1_r_Dim_Wim[(16 + 14)-1:14]));
assign inst_1_w_mult_im = ($signed(inst_1_r_Dre_Wim[(16 + 14)-1:14]) + $signed(inst_1_r_Dim_Wre[(16 + 14)-1:14]));



assign o_w_union4_wr_addr = inst_1_w_bit_reverse_wr_addr[8-1:0];



assign inst_1_w_Rre = $signed(inst_1_r_i_data[1][32-1:16]);


always @(inst_1_r_sum_im_minus, inst_1_r_sum_re_minus, inst_1_r_sum_re_plus, inst_1_r_sum_im_plus) begin: FFT_FSM_INST_1_F_OUT_DATA
    if ((inst_1_r_sum_re_plus[16] == 1)) begin
        inst_1_w_out_re0 = (inst_1_r_sum_re_plus + 1'b1);
    end
    else begin
        inst_1_w_out_re0 = inst_1_r_sum_re_plus;
    end
    if ((inst_1_r_sum_im_plus[16] == 1)) begin
        inst_1_w_out_im0 = (inst_1_r_sum_im_plus + 1'b1);
    end
    else begin
        inst_1_w_out_im0 = inst_1_r_sum_im_plus;
    end
    if ((inst_1_r_sum_re_minus[16] == 1)) begin
        inst_1_w_out_re1 = (inst_1_r_sum_re_minus + 1'b1);
    end
    else begin
        inst_1_w_out_re1 = inst_1_r_sum_re_minus;
    end
    if ((inst_1_r_sum_im_minus[16] == 1)) begin
        inst_1_w_out_im1 = (inst_1_r_sum_im_minus + 1'b1);
    end
    else begin
        inst_1_w_out_im1 = inst_1_r_sum_im_minus;
    end
end



assign inst_1_w_Dre = $signed(o_w_dualram_data[32-1:16]);


always @(posedge i_clk) begin: FFT_FSM_INST_2
    if ((i_rst == 1)) begin
        r_state <= 5'b00001;
        r_cnt <= 0;
        r_log_val <= 0;
        r_en_un4 <= 0;
    end
    else begin
        casez (r_state)
            5'b????1: begin
                if (i_new_data) begin
                    r_cnt <= (r_cnt + 1'b1);
                    if (($signed({1'b0, r_cnt}) == (64 - 1))) begin
                        r_state <= 5'b00010;
                    end
                end
            end
            5'b???1?: begin
                r_cnt <= 0;
                r_state <= 5'b00100;
            end
            5'b??1??: begin
                if (($signed({1'b0, i_w_muxed_wr_addr}) == (256 - 1))) begin
                    r_state <= 5'b10000;
                    r_log_val <= 1;
                end
            end
            5'b1????: begin
                r_en_un4 <= 1;
                if (($signed({1'b0, i_w_muxed_wr_addr}) == (256 - 1))) begin
                    r_en_un4 <= 0;
                    if ((r_log_val == 8)) begin
                        r_state <= 5'b00001;
                        r_log_val <= 0;
                    end
                    else begin
                        r_state <= 5'b10000;
                        r_log_val <= (r_log_val + 1'b1);
                    end
                end
            end
            default: begin
                r_state <= 5'b00001;
                r_cnt <= 0;
                r_log_val <= 0;
                r_en_un4 <= 0;
            end
        endcase
    end
end



assign o_dout = o_w_union4_data;


always @(r_log_val, i_w_muxed_we) begin: FFT_FSM_INST_4
    if ((r_log_val == 8)) begin
        o_active_write = i_w_muxed_we;
    end
    else begin
        o_active_write = 0;
    end
end


always @(o_w_shift_addr, r_state, o_w_union4_wr_addr) begin: FFT_FSM_INST_5
    if ((r_state == 5'b00100)) begin
        i_w_muxed_wr_addr = o_w_shift_addr;
    end
    else begin
        i_w_muxed_wr_addr = o_w_union4_wr_addr;
    end
end



assign o_addr = o_w_union4_wr_addr;



assign inst_7_w_ram_dout = inst_7_ram_r_dout;


always @(posedge i_clk) begin: FFT_FSM_INST_7_RAM_SEQ
    inst_7_ram_r_dout <= inst_7_ram_mem[inst_7_r_addr];
    if ((inst_7_r_we == 1)) begin
        inst_7_ram_mem[inst_7_r_addr] <= inst_7_w_ram_din;
    end
end



assign inst_7_w_rom_dout = inst_7_rom_r_dout;


always @(posedge i_clk) begin: FFT_FSM_INST_7_ROM_SEQ
    case (inst_7_r_addr)
        0: inst_7_rom_r_dout <= 16384;
        1: inst_7_rom_r_dout <= 16384;
        2: inst_7_rom_r_dout <= 16384;
        3: inst_7_rom_r_dout <= 16384;
        4: inst_7_rom_r_dout <= 16384;
        5: inst_7_rom_r_dout <= 16384;
        6: inst_7_rom_r_dout <= 16384;
        7: inst_7_rom_r_dout <= 16384;
        8: inst_7_rom_r_dout <= 16384;
        9: inst_7_rom_r_dout <= 16384;
        10: inst_7_rom_r_dout <= 16384;
        11: inst_7_rom_r_dout <= 16384;
        12: inst_7_rom_r_dout <= 16384;
        13: inst_7_rom_r_dout <= 16384;
        14: inst_7_rom_r_dout <= 16384;
        15: inst_7_rom_r_dout <= 16384;
        16: inst_7_rom_r_dout <= 16384;
        17: inst_7_rom_r_dout <= 16384;
        18: inst_7_rom_r_dout <= 16384;
        19: inst_7_rom_r_dout <= 16384;
        20: inst_7_rom_r_dout <= 16384;
        21: inst_7_rom_r_dout <= 16384;
        22: inst_7_rom_r_dout <= 16384;
        23: inst_7_rom_r_dout <= 16384;
        24: inst_7_rom_r_dout <= 16384;
        25: inst_7_rom_r_dout <= 16384;
        26: inst_7_rom_r_dout <= 16384;
        27: inst_7_rom_r_dout <= 16384;
        28: inst_7_rom_r_dout <= 16384;
        29: inst_7_rom_r_dout <= 16384;
        30: inst_7_rom_r_dout <= 16384;
        31: inst_7_rom_r_dout <= 16384;
        32: inst_7_rom_r_dout <= 16384;
        33: inst_7_rom_r_dout <= 16384;
        34: inst_7_rom_r_dout <= 16384;
        35: inst_7_rom_r_dout <= 16384;
        36: inst_7_rom_r_dout <= 16384;
        37: inst_7_rom_r_dout <= 16384;
        38: inst_7_rom_r_dout <= 16384;
        39: inst_7_rom_r_dout <= 16384;
        40: inst_7_rom_r_dout <= 16384;
        41: inst_7_rom_r_dout <= 16384;
        42: inst_7_rom_r_dout <= 16384;
        43: inst_7_rom_r_dout <= 16384;
        44: inst_7_rom_r_dout <= 16384;
        45: inst_7_rom_r_dout <= 16384;
        46: inst_7_rom_r_dout <= 16384;
        47: inst_7_rom_r_dout <= 16384;
        48: inst_7_rom_r_dout <= 16384;
        49: inst_7_rom_r_dout <= 16384;
        50: inst_7_rom_r_dout <= 16384;
        51: inst_7_rom_r_dout <= 16384;
        52: inst_7_rom_r_dout <= 16384;
        53: inst_7_rom_r_dout <= 16384;
        54: inst_7_rom_r_dout <= 16384;
        55: inst_7_rom_r_dout <= 16384;
        56: inst_7_rom_r_dout <= 16384;
        57: inst_7_rom_r_dout <= 16384;
        58: inst_7_rom_r_dout <= 16384;
        59: inst_7_rom_r_dout <= 16384;
        60: inst_7_rom_r_dout <= 16384;
        61: inst_7_rom_r_dout <= 16384;
        62: inst_7_rom_r_dout <= 16384;
        63: inst_7_rom_r_dout <= 16384;
        64: inst_7_rom_r_dout <= 16384;
        65: inst_7_rom_r_dout <= 16384;
        66: inst_7_rom_r_dout <= 16384;
        67: inst_7_rom_r_dout <= 16384;
        68: inst_7_rom_r_dout <= 16384;
        69: inst_7_rom_r_dout <= 16384;
        70: inst_7_rom_r_dout <= 16384;
        71: inst_7_rom_r_dout <= 16384;
        72: inst_7_rom_r_dout <= 16384;
        73: inst_7_rom_r_dout <= 16384;
        74: inst_7_rom_r_dout <= 16384;
        75: inst_7_rom_r_dout <= 16384;
        76: inst_7_rom_r_dout <= 16384;
        77: inst_7_rom_r_dout <= 16384;
        78: inst_7_rom_r_dout <= 16384;
        79: inst_7_rom_r_dout <= 16384;
        80: inst_7_rom_r_dout <= 16384;
        81: inst_7_rom_r_dout <= 16384;
        82: inst_7_rom_r_dout <= 16384;
        83: inst_7_rom_r_dout <= 16384;
        84: inst_7_rom_r_dout <= 16384;
        85: inst_7_rom_r_dout <= 16384;
        86: inst_7_rom_r_dout <= 16384;
        87: inst_7_rom_r_dout <= 16384;
        88: inst_7_rom_r_dout <= 16384;
        89: inst_7_rom_r_dout <= 16384;
        90: inst_7_rom_r_dout <= 16384;
        91: inst_7_rom_r_dout <= 16384;
        92: inst_7_rom_r_dout <= 16384;
        93: inst_7_rom_r_dout <= 16384;
        94: inst_7_rom_r_dout <= 16384;
        95: inst_7_rom_r_dout <= 16384;
        96: inst_7_rom_r_dout <= 16384;
        97: inst_7_rom_r_dout <= 16384;
        98: inst_7_rom_r_dout <= 16384;
        99: inst_7_rom_r_dout <= 16384;
        100: inst_7_rom_r_dout <= 16384;
        101: inst_7_rom_r_dout <= 16384;
        102: inst_7_rom_r_dout <= 16384;
        103: inst_7_rom_r_dout <= 16384;
        104: inst_7_rom_r_dout <= 16384;
        105: inst_7_rom_r_dout <= 16384;
        106: inst_7_rom_r_dout <= 16384;
        107: inst_7_rom_r_dout <= 16384;
        108: inst_7_rom_r_dout <= 16384;
        109: inst_7_rom_r_dout <= 16384;
        110: inst_7_rom_r_dout <= 16384;
        111: inst_7_rom_r_dout <= 16384;
        112: inst_7_rom_r_dout <= 16384;
        113: inst_7_rom_r_dout <= 16384;
        114: inst_7_rom_r_dout <= 16384;
        115: inst_7_rom_r_dout <= 16384;
        116: inst_7_rom_r_dout <= 16384;
        117: inst_7_rom_r_dout <= 16384;
        118: inst_7_rom_r_dout <= 16384;
        119: inst_7_rom_r_dout <= 16384;
        120: inst_7_rom_r_dout <= 16384;
        121: inst_7_rom_r_dout <= 16384;
        122: inst_7_rom_r_dout <= 16384;
        123: inst_7_rom_r_dout <= 16384;
        124: inst_7_rom_r_dout <= 16384;
        125: inst_7_rom_r_dout <= 16384;
        126: inst_7_rom_r_dout <= 16384;
        127: inst_7_rom_r_dout <= 16384;
        128: inst_7_rom_r_dout <= 16384;
        129: inst_7_rom_r_dout <= 16384;
        130: inst_7_rom_r_dout <= 16384;
        131: inst_7_rom_r_dout <= 16384;
        132: inst_7_rom_r_dout <= 16384;
        133: inst_7_rom_r_dout <= 16384;
        134: inst_7_rom_r_dout <= 16384;
        135: inst_7_rom_r_dout <= 16384;
        136: inst_7_rom_r_dout <= 16384;
        137: inst_7_rom_r_dout <= 16384;
        138: inst_7_rom_r_dout <= 16384;
        139: inst_7_rom_r_dout <= 16384;
        140: inst_7_rom_r_dout <= 16384;
        141: inst_7_rom_r_dout <= 16384;
        142: inst_7_rom_r_dout <= 16384;
        143: inst_7_rom_r_dout <= 16384;
        144: inst_7_rom_r_dout <= 16384;
        145: inst_7_rom_r_dout <= 16384;
        146: inst_7_rom_r_dout <= 16384;
        147: inst_7_rom_r_dout <= 16384;
        148: inst_7_rom_r_dout <= 16384;
        149: inst_7_rom_r_dout <= 16384;
        150: inst_7_rom_r_dout <= 16384;
        151: inst_7_rom_r_dout <= 16384;
        152: inst_7_rom_r_dout <= 16384;
        153: inst_7_rom_r_dout <= 16384;
        154: inst_7_rom_r_dout <= 16384;
        155: inst_7_rom_r_dout <= 16384;
        156: inst_7_rom_r_dout <= 16384;
        157: inst_7_rom_r_dout <= 16384;
        158: inst_7_rom_r_dout <= 16384;
        159: inst_7_rom_r_dout <= 16384;
        160: inst_7_rom_r_dout <= 16384;
        161: inst_7_rom_r_dout <= 16384;
        162: inst_7_rom_r_dout <= 16384;
        163: inst_7_rom_r_dout <= 16384;
        164: inst_7_rom_r_dout <= 16384;
        165: inst_7_rom_r_dout <= 16384;
        166: inst_7_rom_r_dout <= 16384;
        167: inst_7_rom_r_dout <= 16384;
        168: inst_7_rom_r_dout <= 16384;
        169: inst_7_rom_r_dout <= 16384;
        170: inst_7_rom_r_dout <= 16384;
        171: inst_7_rom_r_dout <= 16384;
        172: inst_7_rom_r_dout <= 16384;
        173: inst_7_rom_r_dout <= 16384;
        174: inst_7_rom_r_dout <= 16384;
        175: inst_7_rom_r_dout <= 16384;
        176: inst_7_rom_r_dout <= 16384;
        177: inst_7_rom_r_dout <= 16384;
        178: inst_7_rom_r_dout <= 16384;
        179: inst_7_rom_r_dout <= 16384;
        180: inst_7_rom_r_dout <= 16384;
        181: inst_7_rom_r_dout <= 16384;
        182: inst_7_rom_r_dout <= 16384;
        183: inst_7_rom_r_dout <= 16384;
        184: inst_7_rom_r_dout <= 16384;
        185: inst_7_rom_r_dout <= 16384;
        186: inst_7_rom_r_dout <= 16384;
        187: inst_7_rom_r_dout <= 16384;
        188: inst_7_rom_r_dout <= 16384;
        189: inst_7_rom_r_dout <= 16384;
        190: inst_7_rom_r_dout <= 16384;
        191: inst_7_rom_r_dout <= 16384;
        192: inst_7_rom_r_dout <= 16384;
        193: inst_7_rom_r_dout <= 16384;
        194: inst_7_rom_r_dout <= 16384;
        195: inst_7_rom_r_dout <= 16384;
        196: inst_7_rom_r_dout <= 16384;
        197: inst_7_rom_r_dout <= 16384;
        198: inst_7_rom_r_dout <= 16384;
        199: inst_7_rom_r_dout <= 16384;
        200: inst_7_rom_r_dout <= 16384;
        201: inst_7_rom_r_dout <= 16384;
        202: inst_7_rom_r_dout <= 16384;
        203: inst_7_rom_r_dout <= 16384;
        204: inst_7_rom_r_dout <= 16384;
        205: inst_7_rom_r_dout <= 16384;
        206: inst_7_rom_r_dout <= 16384;
        207: inst_7_rom_r_dout <= 16384;
        208: inst_7_rom_r_dout <= 16384;
        209: inst_7_rom_r_dout <= 16384;
        210: inst_7_rom_r_dout <= 16384;
        211: inst_7_rom_r_dout <= 16384;
        212: inst_7_rom_r_dout <= 16384;
        213: inst_7_rom_r_dout <= 16384;
        214: inst_7_rom_r_dout <= 16384;
        215: inst_7_rom_r_dout <= 16384;
        216: inst_7_rom_r_dout <= 16384;
        217: inst_7_rom_r_dout <= 16384;
        218: inst_7_rom_r_dout <= 16384;
        219: inst_7_rom_r_dout <= 16384;
        220: inst_7_rom_r_dout <= 16384;
        221: inst_7_rom_r_dout <= 16384;
        222: inst_7_rom_r_dout <= 16384;
        223: inst_7_rom_r_dout <= 16384;
        224: inst_7_rom_r_dout <= 16384;
        225: inst_7_rom_r_dout <= 16384;
        226: inst_7_rom_r_dout <= 16384;
        227: inst_7_rom_r_dout <= 16384;
        228: inst_7_rom_r_dout <= 16384;
        229: inst_7_rom_r_dout <= 16384;
        230: inst_7_rom_r_dout <= 16384;
        231: inst_7_rom_r_dout <= 16384;
        232: inst_7_rom_r_dout <= 16384;
        233: inst_7_rom_r_dout <= 16384;
        234: inst_7_rom_r_dout <= 16384;
        235: inst_7_rom_r_dout <= 16384;
        236: inst_7_rom_r_dout <= 16384;
        237: inst_7_rom_r_dout <= 16384;
        238: inst_7_rom_r_dout <= 16384;
        239: inst_7_rom_r_dout <= 16384;
        240: inst_7_rom_r_dout <= 16384;
        241: inst_7_rom_r_dout <= 16384;
        242: inst_7_rom_r_dout <= 16384;
        243: inst_7_rom_r_dout <= 16384;
        244: inst_7_rom_r_dout <= 16384;
        245: inst_7_rom_r_dout <= 16384;
        246: inst_7_rom_r_dout <= 16384;
        247: inst_7_rom_r_dout <= 16384;
        248: inst_7_rom_r_dout <= 16384;
        249: inst_7_rom_r_dout <= 16384;
        250: inst_7_rom_r_dout <= 16384;
        251: inst_7_rom_r_dout <= 16384;
        252: inst_7_rom_r_dout <= 16384;
        253: inst_7_rom_r_dout <= 16384;
        254: inst_7_rom_r_dout <= 16384;
        default: inst_7_rom_r_dout <= 16384;
    endcase
end


always @(posedge i_clk) begin: FFT_FSM_INST_7_SEQ
    if ((i_rst == 1)) begin
        inst_7_r_shift_addr <= 0;
        inst_7_r_shift_dout <= 0;
        inst_7_r_shift_act <= 0;
        inst_7_r_we <= 0;
        inst_7_r_addr <= 0;
    end
    else if ((i_en == 1)) begin
        inst_7_r_shift_addr <= inst_7_r_addr;
        inst_7_r_shift_act <= inst_7_r_we;
        inst_7_r_shift_dout <= inst_7_w_ram_din;
        if (i_new_data) begin
            inst_7_r_we <= 1;
            inst_7_r_addr <= 0;
        end
        else begin
            if (($signed({1'b0, inst_7_r_addr}) != (256 - 1))) begin
                inst_7_r_addr <= (inst_7_r_addr + 1'b1);
                inst_7_r_we <= 1;
            end
            else begin
                inst_7_r_we <= 0;
            end
        end
    end
end


always @(inst_7_r_addr, i_data, inst_7_w_ram_dout) begin: FFT_FSM_INST_7_COMB
    if ((inst_7_r_addr == 0)) begin
        inst_7_w_ram_din = i_data;
    end
    else begin
        inst_7_w_ram_din = inst_7_w_ram_dout;
    end
end



assign o_w_shift_data = $signed(inst_7_w_mult[(16 + 14)-1:14]);



assign o_w_shift_active = inst_7_r_shift_act;


always @(inst_7_r_shift_addr) begin: FFT_FSM_INST_7_F_ADDR
    case (inst_7_r_shift_addr)
        0: o_w_shift_addr = 0;
        1: o_w_shift_addr = 128;
        2: o_w_shift_addr = 64;
        3: o_w_shift_addr = 192;
        4: o_w_shift_addr = 32;
        5: o_w_shift_addr = 160;
        6: o_w_shift_addr = 96;
        7: o_w_shift_addr = 224;
        8: o_w_shift_addr = 16;
        9: o_w_shift_addr = 144;
        10: o_w_shift_addr = 80;
        11: o_w_shift_addr = 208;
        12: o_w_shift_addr = 48;
        13: o_w_shift_addr = 176;
        14: o_w_shift_addr = 112;
        15: o_w_shift_addr = 240;
        16: o_w_shift_addr = 8;
        17: o_w_shift_addr = 136;
        18: o_w_shift_addr = 72;
        19: o_w_shift_addr = 200;
        20: o_w_shift_addr = 40;
        21: o_w_shift_addr = 168;
        22: o_w_shift_addr = 104;
        23: o_w_shift_addr = 232;
        24: o_w_shift_addr = 24;
        25: o_w_shift_addr = 152;
        26: o_w_shift_addr = 88;
        27: o_w_shift_addr = 216;
        28: o_w_shift_addr = 56;
        29: o_w_shift_addr = 184;
        30: o_w_shift_addr = 120;
        31: o_w_shift_addr = 248;
        32: o_w_shift_addr = 4;
        33: o_w_shift_addr = 132;
        34: o_w_shift_addr = 68;
        35: o_w_shift_addr = 196;
        36: o_w_shift_addr = 36;
        37: o_w_shift_addr = 164;
        38: o_w_shift_addr = 100;
        39: o_w_shift_addr = 228;
        40: o_w_shift_addr = 20;
        41: o_w_shift_addr = 148;
        42: o_w_shift_addr = 84;
        43: o_w_shift_addr = 212;
        44: o_w_shift_addr = 52;
        45: o_w_shift_addr = 180;
        46: o_w_shift_addr = 116;
        47: o_w_shift_addr = 244;
        48: o_w_shift_addr = 12;
        49: o_w_shift_addr = 140;
        50: o_w_shift_addr = 76;
        51: o_w_shift_addr = 204;
        52: o_w_shift_addr = 44;
        53: o_w_shift_addr = 172;
        54: o_w_shift_addr = 108;
        55: o_w_shift_addr = 236;
        56: o_w_shift_addr = 28;
        57: o_w_shift_addr = 156;
        58: o_w_shift_addr = 92;
        59: o_w_shift_addr = 220;
        60: o_w_shift_addr = 60;
        61: o_w_shift_addr = 188;
        62: o_w_shift_addr = 124;
        63: o_w_shift_addr = 252;
        64: o_w_shift_addr = 2;
        65: o_w_shift_addr = 130;
        66: o_w_shift_addr = 66;
        67: o_w_shift_addr = 194;
        68: o_w_shift_addr = 34;
        69: o_w_shift_addr = 162;
        70: o_w_shift_addr = 98;
        71: o_w_shift_addr = 226;
        72: o_w_shift_addr = 18;
        73: o_w_shift_addr = 146;
        74: o_w_shift_addr = 82;
        75: o_w_shift_addr = 210;
        76: o_w_shift_addr = 50;
        77: o_w_shift_addr = 178;
        78: o_w_shift_addr = 114;
        79: o_w_shift_addr = 242;
        80: o_w_shift_addr = 10;
        81: o_w_shift_addr = 138;
        82: o_w_shift_addr = 74;
        83: o_w_shift_addr = 202;
        84: o_w_shift_addr = 42;
        85: o_w_shift_addr = 170;
        86: o_w_shift_addr = 106;
        87: o_w_shift_addr = 234;
        88: o_w_shift_addr = 26;
        89: o_w_shift_addr = 154;
        90: o_w_shift_addr = 90;
        91: o_w_shift_addr = 218;
        92: o_w_shift_addr = 58;
        93: o_w_shift_addr = 186;
        94: o_w_shift_addr = 122;
        95: o_w_shift_addr = 250;
        96: o_w_shift_addr = 6;
        97: o_w_shift_addr = 134;
        98: o_w_shift_addr = 70;
        99: o_w_shift_addr = 198;
        100: o_w_shift_addr = 38;
        101: o_w_shift_addr = 166;
        102: o_w_shift_addr = 102;
        103: o_w_shift_addr = 230;
        104: o_w_shift_addr = 22;
        105: o_w_shift_addr = 150;
        106: o_w_shift_addr = 86;
        107: o_w_shift_addr = 214;
        108: o_w_shift_addr = 54;
        109: o_w_shift_addr = 182;
        110: o_w_shift_addr = 118;
        111: o_w_shift_addr = 246;
        112: o_w_shift_addr = 14;
        113: o_w_shift_addr = 142;
        114: o_w_shift_addr = 78;
        115: o_w_shift_addr = 206;
        116: o_w_shift_addr = 46;
        117: o_w_shift_addr = 174;
        118: o_w_shift_addr = 110;
        119: o_w_shift_addr = 238;
        120: o_w_shift_addr = 30;
        121: o_w_shift_addr = 158;
        122: o_w_shift_addr = 94;
        123: o_w_shift_addr = 222;
        124: o_w_shift_addr = 62;
        125: o_w_shift_addr = 190;
        126: o_w_shift_addr = 126;
        127: o_w_shift_addr = 254;
        128: o_w_shift_addr = 1;
        129: o_w_shift_addr = 129;
        130: o_w_shift_addr = 65;
        131: o_w_shift_addr = 193;
        132: o_w_shift_addr = 33;
        133: o_w_shift_addr = 161;
        134: o_w_shift_addr = 97;
        135: o_w_shift_addr = 225;
        136: o_w_shift_addr = 17;
        137: o_w_shift_addr = 145;
        138: o_w_shift_addr = 81;
        139: o_w_shift_addr = 209;
        140: o_w_shift_addr = 49;
        141: o_w_shift_addr = 177;
        142: o_w_shift_addr = 113;
        143: o_w_shift_addr = 241;
        144: o_w_shift_addr = 9;
        145: o_w_shift_addr = 137;
        146: o_w_shift_addr = 73;
        147: o_w_shift_addr = 201;
        148: o_w_shift_addr = 41;
        149: o_w_shift_addr = 169;
        150: o_w_shift_addr = 105;
        151: o_w_shift_addr = 233;
        152: o_w_shift_addr = 25;
        153: o_w_shift_addr = 153;
        154: o_w_shift_addr = 89;
        155: o_w_shift_addr = 217;
        156: o_w_shift_addr = 57;
        157: o_w_shift_addr = 185;
        158: o_w_shift_addr = 121;
        159: o_w_shift_addr = 249;
        160: o_w_shift_addr = 5;
        161: o_w_shift_addr = 133;
        162: o_w_shift_addr = 69;
        163: o_w_shift_addr = 197;
        164: o_w_shift_addr = 37;
        165: o_w_shift_addr = 165;
        166: o_w_shift_addr = 101;
        167: o_w_shift_addr = 229;
        168: o_w_shift_addr = 21;
        169: o_w_shift_addr = 149;
        170: o_w_shift_addr = 85;
        171: o_w_shift_addr = 213;
        172: o_w_shift_addr = 53;
        173: o_w_shift_addr = 181;
        174: o_w_shift_addr = 117;
        175: o_w_shift_addr = 245;
        176: o_w_shift_addr = 13;
        177: o_w_shift_addr = 141;
        178: o_w_shift_addr = 77;
        179: o_w_shift_addr = 205;
        180: o_w_shift_addr = 45;
        181: o_w_shift_addr = 173;
        182: o_w_shift_addr = 109;
        183: o_w_shift_addr = 237;
        184: o_w_shift_addr = 29;
        185: o_w_shift_addr = 157;
        186: o_w_shift_addr = 93;
        187: o_w_shift_addr = 221;
        188: o_w_shift_addr = 61;
        189: o_w_shift_addr = 189;
        190: o_w_shift_addr = 125;
        191: o_w_shift_addr = 253;
        192: o_w_shift_addr = 3;
        193: o_w_shift_addr = 131;
        194: o_w_shift_addr = 67;
        195: o_w_shift_addr = 195;
        196: o_w_shift_addr = 35;
        197: o_w_shift_addr = 163;
        198: o_w_shift_addr = 99;
        199: o_w_shift_addr = 227;
        200: o_w_shift_addr = 19;
        201: o_w_shift_addr = 147;
        202: o_w_shift_addr = 83;
        203: o_w_shift_addr = 211;
        204: o_w_shift_addr = 51;
        205: o_w_shift_addr = 179;
        206: o_w_shift_addr = 115;
        207: o_w_shift_addr = 243;
        208: o_w_shift_addr = 11;
        209: o_w_shift_addr = 139;
        210: o_w_shift_addr = 75;
        211: o_w_shift_addr = 203;
        212: o_w_shift_addr = 43;
        213: o_w_shift_addr = 171;
        214: o_w_shift_addr = 107;
        215: o_w_shift_addr = 235;
        216: o_w_shift_addr = 27;
        217: o_w_shift_addr = 155;
        218: o_w_shift_addr = 91;
        219: o_w_shift_addr = 219;
        220: o_w_shift_addr = 59;
        221: o_w_shift_addr = 187;
        222: o_w_shift_addr = 123;
        223: o_w_shift_addr = 251;
        224: o_w_shift_addr = 7;
        225: o_w_shift_addr = 135;
        226: o_w_shift_addr = 71;
        227: o_w_shift_addr = 199;
        228: o_w_shift_addr = 39;
        229: o_w_shift_addr = 167;
        230: o_w_shift_addr = 103;
        231: o_w_shift_addr = 231;
        232: o_w_shift_addr = 23;
        233: o_w_shift_addr = 151;
        234: o_w_shift_addr = 87;
        235: o_w_shift_addr = 215;
        236: o_w_shift_addr = 55;
        237: o_w_shift_addr = 183;
        238: o_w_shift_addr = 119;
        239: o_w_shift_addr = 247;
        240: o_w_shift_addr = 15;
        241: o_w_shift_addr = 143;
        242: o_w_shift_addr = 79;
        243: o_w_shift_addr = 207;
        244: o_w_shift_addr = 47;
        245: o_w_shift_addr = 175;
        246: o_w_shift_addr = 111;
        247: o_w_shift_addr = 239;
        248: o_w_shift_addr = 31;
        249: o_w_shift_addr = 159;
        250: o_w_shift_addr = 95;
        251: o_w_shift_addr = 223;
        252: o_w_shift_addr = 63;
        253: o_w_shift_addr = 191;
        254: o_w_shift_addr = 127;
        default: o_w_shift_addr = 255;
    endcase
end



assign inst_7_w_mult = (inst_7_r_shift_dout * inst_7_w_rom_dout);



assign o_w_dualram_data = fsm_dualram_r_dout;


always @(posedge i_clk) begin: FFT_FSM_FSM_DUALRAM_SEQ
    fsm_dualram_r_dout <= fsm_dualram_mem[i_w_muxed_rd_addr];
    if ((i_w_muxed_we == 1)) begin
        fsm_dualram_mem[i_w_muxed_wr_addr] <= i_w_muxed_data;
    end
end


always @(r_state, o_w_union4_rd_addr) begin: FFT_FSM_F_MUXED_RD_ADDR
    if ((r_state == 5'b00100)) begin
        i_w_muxed_rd_addr = 0;
    end
    else begin
        i_w_muxed_rd_addr = o_w_union4_rd_addr;
    end
end


always @(r_state, o_w_shift_active, o_w_union4_we) begin: FFT_FSM_F_MUXED_WE
    if ((r_state == 5'b00100)) begin
        i_w_muxed_we = o_w_shift_active;
    end
    else begin
        i_w_muxed_we = o_w_union4_we;
    end
end

endmodule
